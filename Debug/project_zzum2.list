
project_zzum2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005454  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005614  08005614  000204c0  2**0
                  CONTENTS
  4 .ARM          00000000  08005614  08005614  000204c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005614  08005614  000204c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004c0  20000000  0800561c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000204c0  2**0
                  CONTENTS
 10 .bss          00000720  200004c0  200004c0  000204c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000be0  20000be0  000204c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000204c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015940  00000000  00000000  000204f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c0  00000000  00000000  00035e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  000384f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb0  00000000  00000000  00039588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218c9  00000000  00000000  0003a538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f81  00000000  00000000  0005be01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc5f5  00000000  00000000  0006fd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013c377  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004690  00000000  00000000  0013c3cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200004c0 	.word	0x200004c0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080055c4 	.word	0x080055c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200004c4 	.word	0x200004c4
 80001c4:	080055c4 	.word	0x080055c4

080001c8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	adc_value = HAL_ADC_GetValue(&hadc1);
 80001d0:	482f      	ldr	r0, [pc, #188]	; (8000290 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80001d2:	f000 ffaf 	bl	8001134 <HAL_ADC_GetValue>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b2e      	ldr	r3, [pc, #184]	; (8000294 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80001dc:	601a      	str	r2, [r3, #0]
	//adc_value = sample_signal[j];
	if (j < 100) {j++;}
 80001de:	4b2e      	ldr	r3, [pc, #184]	; (8000298 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b63      	cmp	r3, #99	; 0x63
 80001e4:	dc05      	bgt.n	80001f2 <HAL_TIM_PeriodElapsedCallback+0x2a>
 80001e6:	4b2c      	ldr	r3, [pc, #176]	; (8000298 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	3301      	adds	r3, #1
 80001ec:	4a2a      	ldr	r2, [pc, #168]	; (8000298 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80001ee:	6013      	str	r3, [r2, #0]
 80001f0:	e002      	b.n	80001f8 <HAL_TIM_PeriodElapsedCallback+0x30>
	else {j = 0;}
 80001f2:	4b29      	ldr	r3, [pc, #164]	; (8000298 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	601a      	str	r2, [r3, #0]

	float y = 0;
 80001f8:	f04f 0300 	mov.w	r3, #0
 80001fc:	60fb      	str	r3, [r7, #12]

	for(uint16_t i = 0; i < FT_ORDER-1; i++)
 80001fe:	2300      	movs	r3, #0
 8000200:	817b      	strh	r3, [r7, #10]
 8000202:	e00b      	b.n	800021c <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		x[i] = x[i+1];
 8000204:	897b      	ldrh	r3, [r7, #10]
 8000206:	1c5a      	adds	r2, r3, #1
 8000208:	897b      	ldrh	r3, [r7, #10]
 800020a:	4924      	ldr	r1, [pc, #144]	; (800029c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800020c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000210:	4922      	ldr	r1, [pc, #136]	; (800029c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint16_t i = 0; i < FT_ORDER-1; i++)
 8000216:	897b      	ldrh	r3, [r7, #10]
 8000218:	3301      	adds	r3, #1
 800021a:	817b      	strh	r3, [r7, #10]
 800021c:	897b      	ldrh	r3, [r7, #10]
 800021e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000222:	d3ef      	bcc.n	8000204 <HAL_TIM_PeriodElapsedCallback+0x3c>
	}

	x[FT_ORDER-1] = adc_value;
 8000224:	4b1b      	ldr	r3, [pc, #108]	; (8000294 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1c      	ldr	r2, [pc, #112]	; (800029c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800022a:	f8c2 34b0 	str.w	r3, [r2, #1200]	; 0x4b0

	for(uint16_t i = 0; i < FT_ORDER; i++)
 800022e:	2300      	movs	r3, #0
 8000230:	813b      	strh	r3, [r7, #8]
 8000232:	e01a      	b.n	800026a <HAL_TIM_PeriodElapsedCallback+0xa2>
	{
		y = y + x[i] * h[FT_ORDER - i - 1];
 8000234:	893b      	ldrh	r3, [r7, #8]
 8000236:	4a19      	ldr	r2, [pc, #100]	; (800029c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023c:	ee07 3a90 	vmov	s15, r3
 8000240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000244:	893b      	ldrh	r3, [r7, #8]
 8000246:	f5c3 7396 	rsb	r3, r3, #300	; 0x12c
 800024a:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	4413      	add	r3, r2
 8000250:	edd3 7a00 	vldr	s15, [r3]
 8000254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000258:	ed97 7a03 	vldr	s14, [r7, #12]
 800025c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000260:	edc7 7a03 	vstr	s15, [r7, #12]
	for(uint16_t i = 0; i < FT_ORDER; i++)
 8000264:	893b      	ldrh	r3, [r7, #8]
 8000266:	3301      	adds	r3, #1
 8000268:	813b      	strh	r3, [r7, #8]
 800026a:	893b      	ldrh	r3, [r7, #8]
 800026c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000270:	d9e0      	bls.n	8000234 <HAL_TIM_PeriodElapsedCallback+0x6c>
	///HAL_UART_Transmit(&huart2,(uint8_t *)(&str), sizeof(str),100);
	//char str1[5];
	//sprintf(str1, "%d\r\n", (int)y);
	//HAL_UART_Transmit(&huart2,(uint8_t *)(&str1), sizeof(str1),100);

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int)y);
 8000272:	edd7 7a03 	vldr	s15, [r7, #12]
 8000276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800027a:	ee17 3a90 	vmov	r3, s15
 800027e:	2200      	movs	r2, #0
 8000280:	2100      	movs	r1, #0
 8000282:	4808      	ldr	r0, [pc, #32]	; (80002a4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000284:	f001 ffd0 	bl	8002228 <HAL_DAC_SetValue>
}
 8000288:	bf00      	nop
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000a18 	.word	0x20000a18
 8000294:	200004dc 	.word	0x200004dc
 8000298:	200004e0 	.word	0x200004e0
 800029c:	20000528 	.word	0x20000528
 80002a0:	20000000 	.word	0x20000000
 80002a4:	200009dc 	.word	0x200009dc

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ac:	f000 fc48 	bl	8000b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b0:	f000 f81e 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b4:	f000 f9a8 	bl	8000608 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002b8:	f000 f860 	bl	800037c <MX_ADC1_Init>
  MX_DMA_Init();
 80002bc:	f000 f976 	bl	80005ac <MX_DMA_Init>
  MX_DAC1_Init();
 80002c0:	f000 f8cc 	bl	800045c <MX_DAC1_Init>
  MX_TIM2_Init();
 80002c4:	f000 f8f4 	bl	80004b0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80002c8:	f000 f940 	bl	800054c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 80002cc:	4805      	ldr	r0, [pc, #20]	; (80002e4 <main+0x3c>)
 80002ce:	f000 fe7b 	bl	8000fc8 <HAL_ADC_Start>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 80002d2:	2100      	movs	r1, #0
 80002d4:	4804      	ldr	r0, [pc, #16]	; (80002e8 <main+0x40>)
 80002d6:	f001 ffcc 	bl	8002272 <HAL_DAC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 80002da:	4804      	ldr	r0, [pc, #16]	; (80002ec <main+0x44>)
 80002dc:	f003 fe5e 	bl	8003f9c <HAL_TIM_Base_Start_IT>
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <main+0x38>
 80002e2:	bf00      	nop
 80002e4:	20000a18 	.word	0x20000a18
 80002e8:	200009dc 	.word	0x200009dc
 80002ec:	20000b0c 	.word	0x20000b0c

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b090      	sub	sp, #64	; 0x40
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0318 	add.w	r3, r7, #24
 80002fa:	2228      	movs	r2, #40	; 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f005 f958 	bl	80055b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000312:	2301      	movs	r3, #1
 8000314:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800031a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000320:	2301      	movs	r3, #1
 8000322:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	2302      	movs	r3, #2
 8000326:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800032c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800032e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000332:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	f107 0318 	add.w	r3, r7, #24
 8000338:	4618      	mov	r0, r3
 800033a:	f002 fc99 	bl	8002c70 <HAL_RCC_OscConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000344:	f000 f98e 	bl	8000664 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000348:	230f      	movs	r3, #15
 800034a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800034c:	2302      	movs	r3, #2
 800034e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2102      	movs	r1, #2
 8000362:	4618      	mov	r0, r3
 8000364:	f003 fb8c 	bl	8003a80 <HAL_RCC_ClockConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800036e:	f000 f979 	bl	8000664 <Error_Handler>
  }
}
 8000372:	bf00      	nop
 8000374:	3740      	adds	r7, #64	; 0x40
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08a      	sub	sp, #40	; 0x28
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000382:	f107 031c 	add.w	r3, r7, #28
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]
 800039c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800039e:	4b2e      	ldr	r3, [pc, #184]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80003a6:	4b2c      	ldr	r3, [pc, #176]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003ae:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003b4:	4b28      	ldr	r3, [pc, #160]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003ba:	4b27      	ldr	r3, [pc, #156]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003bc:	2201      	movs	r2, #1
 80003be:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003c0:	4b25      	ldr	r3, [pc, #148]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003c8:	4b23      	ldr	r3, [pc, #140]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ce:	4b22      	ldr	r3, [pc, #136]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d4:	4b20      	ldr	r3, [pc, #128]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003dc:	2201      	movs	r2, #1
 80003de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003ea:	2204      	movs	r2, #4
 80003ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003ee:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003fa:	4817      	ldr	r0, [pc, #92]	; (8000458 <MX_ADC1_Init+0xdc>)
 80003fc:	f000 fc24 	bl	8000c48 <HAL_ADC_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000406:	f000 f92d 	bl	8000664 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800040e:	f107 031c 	add.w	r3, r7, #28
 8000412:	4619      	mov	r1, r3
 8000414:	4810      	ldr	r0, [pc, #64]	; (8000458 <MX_ADC1_Init+0xdc>)
 8000416:	f001 fbad 	bl	8001b74 <HAL_ADCEx_MultiModeConfigChannel>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000420:	f000 f920 	bl	8000664 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000424:	2301      	movs	r3, #1
 8000426:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000428:	2301      	movs	r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800042c:	2300      	movs	r3, #0
 800042e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	4619      	mov	r1, r3
 8000440:	4805      	ldr	r0, [pc, #20]	; (8000458 <MX_ADC1_Init+0xdc>)
 8000442:	f001 f8d1 	bl	80015e8 <HAL_ADC_ConfigChannel>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 800044c:	f000 f90a 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000450:	bf00      	nop
 8000452:	3728      	adds	r7, #40	; 0x28
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000a18 	.word	0x20000a18

0800045c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800046c:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_DAC1_Init+0x4c>)
 800046e:	4a0f      	ldr	r2, [pc, #60]	; (80004ac <MX_DAC1_Init+0x50>)
 8000470:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000472:	480d      	ldr	r0, [pc, #52]	; (80004a8 <MX_DAC1_Init+0x4c>)
 8000474:	f001 fe52 	bl	800211c <HAL_DAC_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 800047e:	f000 f8f1 	bl	8000664 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	4619      	mov	r1, r3
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_DAC1_Init+0x4c>)
 8000492:	f001 ff95 	bl	80023c0 <HAL_DAC_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 800049c:	f000 f8e2 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	200009dc 	.word	0x200009dc
 80004ac:	40007400 	.word	0x40007400

080004b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
 80004be:	605a      	str	r2, [r3, #4]
 80004c0:	609a      	str	r2, [r3, #8]
 80004c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004ce:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <MX_TIM2_Init+0x98>)
 80004d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 80004d6:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <MX_TIM2_Init+0x98>)
 80004d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004de:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <MX_TIM2_Init+0x98>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 72-1;
 80004e4:	4b18      	ldr	r3, [pc, #96]	; (8000548 <MX_TIM2_Init+0x98>)
 80004e6:	2247      	movs	r2, #71	; 0x47
 80004e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <MX_TIM2_Init+0x98>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <MX_TIM2_Init+0x98>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004f6:	4814      	ldr	r0, [pc, #80]	; (8000548 <MX_TIM2_Init+0x98>)
 80004f8:	f003 fcf8 	bl	8003eec <HAL_TIM_Base_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000502:	f000 f8af 	bl	8000664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800050a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	480d      	ldr	r0, [pc, #52]	; (8000548 <MX_TIM2_Init+0x98>)
 8000514:	f003 febd 	bl	8004292 <HAL_TIM_ConfigClockSource>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800051e:	f000 f8a1 	bl	8000664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	4619      	mov	r1, r3
 800052e:	4806      	ldr	r0, [pc, #24]	; (8000548 <MX_TIM2_Init+0x98>)
 8000530:	f004 f8b2 	bl	8004698 <HAL_TIMEx_MasterConfigSynchronization>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800053a:	f000 f893 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800053e:	bf00      	nop
 8000540:	3720      	adds	r7, #32
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000b0c 	.word	0x20000b0c

0800054c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000550:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000552:	4a15      	ldr	r2, [pc, #84]	; (80005a8 <MX_USART2_UART_Init+0x5c>)
 8000554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000556:	4b13      	ldr	r3, [pc, #76]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800055c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000572:	220c      	movs	r2, #12
 8000574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 800057e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000582:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000586:	2200      	movs	r2, #0
 8000588:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 800058c:	2200      	movs	r2, #0
 800058e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <MX_USART2_UART_Init+0x58>)
 8000592:	f004 f90d 	bl	80047b0 <HAL_UART_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 800059c:	f000 f862 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000b58 	.word	0x20000b58
 80005a8:	40004400 	.word	0x40004400

080005ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_DMA_Init+0x58>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a13      	ldr	r2, [pc, #76]	; (8000604 <MX_DMA_Init+0x58>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_DMA_Init+0x58>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	200b      	movs	r0, #11
 80005d0:	f001 fd5f 	bl	8002092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005d4:	200b      	movs	r0, #11
 80005d6:	f001 fd78 	bl	80020ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	2010      	movs	r0, #16
 80005e0:	f001 fd57 	bl	8002092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80005e4:	2010      	movs	r0, #16
 80005e6:	f001 fd70 	bl	80020ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	2011      	movs	r0, #17
 80005f0:	f001 fd4f 	bl	8002092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80005f4:	2011      	movs	r0, #17
 80005f6:	f001 fd68 	bl	80020ca <HAL_NVIC_EnableIRQ>

}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_GPIO_Init+0x44>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <MX_GPIO_Init+0x44>)
 8000614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_GPIO_Init+0x44>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_GPIO_Init+0x44>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <MX_GPIO_Init+0x44>)
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_GPIO_Init+0x44>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]


  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	e7fe      	b.n	800066c <Error_Handler+0x8>
	...

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <HAL_MspInit+0x44>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <HAL_MspInit+0x44>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6193      	str	r3, [r2, #24]
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <HAL_MspInit+0x44>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_MspInit+0x44>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <HAL_MspInit+0x44>)
 8000694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000698:	61d3      	str	r3, [r2, #28]
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_MspInit+0x44>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000

080006b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006d8:	d154      	bne.n	8000784 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <HAL_ADC_MspInit+0xd4>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a2b      	ldr	r2, [pc, #172]	; (800078c <HAL_ADC_MspInit+0xd4>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6153      	str	r3, [r2, #20]
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <HAL_ADC_MspInit+0xd4>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <HAL_ADC_MspInit+0xd4>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a25      	ldr	r2, [pc, #148]	; (800078c <HAL_ADC_MspInit+0xd4>)
 80006f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4b23      	ldr	r3, [pc, #140]	; (800078c <HAL_ADC_MspInit+0xd4>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800070a:	2301      	movs	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070e:	2303      	movs	r3, #3
 8000710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f002 f860 	bl	80027e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <HAL_ADC_MspInit+0xd8>)
 8000726:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <HAL_ADC_MspInit+0xdc>)
 8000728:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <HAL_ADC_MspInit+0xd8>)
 800072c:	2200      	movs	r2, #0
 800072e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <HAL_ADC_MspInit+0xd8>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <HAL_ADC_MspInit+0xd8>)
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <HAL_ADC_MspInit+0xd8>)
 800073e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000742:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_ADC_MspInit+0xd8>)
 8000746:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800074a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <HAL_ADC_MspInit+0xd8>)
 800074e:	2220      	movs	r2, #32
 8000750:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <HAL_ADC_MspInit+0xd8>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000758:	480d      	ldr	r0, [pc, #52]	; (8000790 <HAL_ADC_MspInit+0xd8>)
 800075a:	f001 fec1 	bl	80024e0 <HAL_DMA_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000764:	f7ff ff7e 	bl	8000664 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a09      	ldr	r2, [pc, #36]	; (8000790 <HAL_ADC_MspInit+0xd8>)
 800076c:	639a      	str	r2, [r3, #56]	; 0x38
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_ADC_MspInit+0xd8>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2012      	movs	r0, #18
 800077a:	f001 fc8a 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800077e:	2012      	movs	r0, #18
 8000780:	f001 fca3 	bl	80020ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	; 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	20000ac8 	.word	0x20000ac8
 8000794:	40020008 	.word	0x40020008

08000798 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a19      	ldr	r2, [pc, #100]	; (800081c <HAL_DAC_MspInit+0x84>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d12c      	bne.n	8000814 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <HAL_DAC_MspInit+0x88>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a18      	ldr	r2, [pc, #96]	; (8000820 <HAL_DAC_MspInit+0x88>)
 80007c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <HAL_DAC_MspInit+0x88>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <HAL_DAC_MspInit+0x88>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <HAL_DAC_MspInit+0x88>)
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <HAL_DAC_MspInit+0x88>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007ea:	2310      	movs	r3, #16
 80007ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ee:	2303      	movs	r3, #3
 80007f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000800:	f001 fff0 	bl	80027e4 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2036      	movs	r0, #54	; 0x36
 800080a:	f001 fc42 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800080e:	2036      	movs	r0, #54	; 0x36
 8000810:	f001 fc5b 	bl	80020ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40007400 	.word	0x40007400
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC1)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_DAC_MspDeInit+0x38>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d10d      	bne.n	8000852 <HAL_DAC_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN DAC1_MspDeInit 0 */

  /* USER CODE END DAC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC1_CLK_DISABLE();
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_DAC_MspDeInit+0x3c>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a09      	ldr	r2, [pc, #36]	; (8000860 <HAL_DAC_MspDeInit+0x3c>)
 800083c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000840:	61d3      	str	r3, [r2, #28]

    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8000842:	2110      	movs	r1, #16
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f002 f93e 	bl	8002ac8 <HAL_GPIO_DeInit>

    /* DAC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM6_DAC1_IRQn);
 800084c:	2036      	movs	r0, #54	; 0x36
 800084e:	f001 fc4a 	bl	80020e6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DAC1_MspDeInit 1 */

  /* USER CODE END DAC1_MspDeInit 1 */
  }

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40007400 	.word	0x40007400
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000874:	d113      	bne.n	800089e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_TIM_Base_MspInit+0x44>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <HAL_TIM_Base_MspInit+0x44>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_TIM_Base_MspInit+0x44>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	201c      	movs	r0, #28
 8000894:	f001 fbfd 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000898:	201c      	movs	r0, #28
 800089a:	f001 fc16 	bl	80020ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a41      	ldr	r2, [pc, #260]	; (80009d0 <HAL_UART_MspInit+0x124>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d17c      	bne.n	80009c8 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	4b41      	ldr	r3, [pc, #260]	; (80009d4 <HAL_UART_MspInit+0x128>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a40      	ldr	r2, [pc, #256]	; (80009d4 <HAL_UART_MspInit+0x128>)
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b3e      	ldr	r3, [pc, #248]	; (80009d4 <HAL_UART_MspInit+0x128>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <HAL_UART_MspInit+0x128>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a3a      	ldr	r2, [pc, #232]	; (80009d4 <HAL_UART_MspInit+0x128>)
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	6153      	str	r3, [r2, #20]
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <HAL_UART_MspInit+0x128>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008fe:	230c      	movs	r3, #12
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800090e:	2307      	movs	r3, #7
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f001 ff62 	bl	80027e4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000920:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <HAL_UART_MspInit+0x12c>)
 8000922:	4a2e      	ldr	r2, [pc, #184]	; (80009dc <HAL_UART_MspInit+0x130>)
 8000924:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000926:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <HAL_UART_MspInit+0x12c>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800092c:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <HAL_UART_MspInit+0x12c>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000932:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <HAL_UART_MspInit+0x12c>)
 8000934:	2280      	movs	r2, #128	; 0x80
 8000936:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000938:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <HAL_UART_MspInit+0x12c>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <HAL_UART_MspInit+0x12c>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <HAL_UART_MspInit+0x12c>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800094a:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <HAL_UART_MspInit+0x12c>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000950:	4821      	ldr	r0, [pc, #132]	; (80009d8 <HAL_UART_MspInit+0x12c>)
 8000952:	f001 fdc5 	bl	80024e0 <HAL_DMA_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800095c:	f7ff fe82 	bl	8000664 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <HAL_UART_MspInit+0x12c>)
 8000964:	671a      	str	r2, [r3, #112]	; 0x70
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <HAL_UART_MspInit+0x12c>)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <HAL_UART_MspInit+0x134>)
 800096e:	4a1d      	ldr	r2, [pc, #116]	; (80009e4 <HAL_UART_MspInit+0x138>)
 8000970:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <HAL_UART_MspInit+0x134>)
 8000974:	2210      	movs	r2, #16
 8000976:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_UART_MspInit+0x134>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <HAL_UART_MspInit+0x134>)
 8000980:	2280      	movs	r2, #128	; 0x80
 8000982:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_UART_MspInit+0x134>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <HAL_UART_MspInit+0x134>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <HAL_UART_MspInit+0x134>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_UART_MspInit+0x134>)
 8000998:	2200      	movs	r2, #0
 800099a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800099c:	4810      	ldr	r0, [pc, #64]	; (80009e0 <HAL_UART_MspInit+0x134>)
 800099e:	f001 fd9f 	bl	80024e0 <HAL_DMA_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 80009a8:	f7ff fe5c 	bl	8000664 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <HAL_UART_MspInit+0x134>)
 80009b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <HAL_UART_MspInit+0x134>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2100      	movs	r1, #0
 80009bc:	2026      	movs	r0, #38	; 0x26
 80009be:	f001 fb68 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009c2:	2026      	movs	r0, #38	; 0x26
 80009c4:	f001 fb81 	bl	80020ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40004400 	.word	0x40004400
 80009d4:	40021000 	.word	0x40021000
 80009d8:	200004e4 	.word	0x200004e4
 80009dc:	4002006c 	.word	0x4002006c
 80009e0:	20000a84 	.word	0x20000a84
 80009e4:	40020080 	.word	0x40020080

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f8ca 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <DMA1_Channel1_IRQHandler+0x10>)
 8000a42:	f001 fe0b 	bl	800265c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000ac8 	.word	0x20000ac8

08000a50 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <DMA1_Channel6_IRQHandler+0x10>)
 8000a56:	f001 fe01 	bl	800265c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200004e4 	.word	0x200004e4

08000a64 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <DMA1_Channel7_IRQHandler+0x10>)
 8000a6a:	f001 fdf7 	bl	800265c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000a84 	.word	0x20000a84

08000a78 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <ADC1_2_IRQHandler+0x10>)
 8000a7e:	f000 fb67 	bl	8001150 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000a18 	.word	0x20000a18

08000a8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <TIM2_IRQHandler+0x10>)
 8000a92:	f003 fadf 	bl	8004054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000b0c 	.word	0x20000b0c

08000aa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <USART2_IRQHandler+0x10>)
 8000aa6:	f003 fed1 	bl	800484c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000b58 	.word	0x20000b58

08000ab4 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <TIM6_DAC1_IRQHandler+0x10>)
 8000aba:	f001 fc25 	bl	8002308 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200009dc 	.word	0x200009dc

08000ac8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af2:	490e      	ldr	r1, [pc, #56]	; (8000b2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <LoopForever+0xe>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b08:	4c0b      	ldr	r4, [pc, #44]	; (8000b38 <LoopForever+0x16>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b16:	f7ff ffd7 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f004 fd27 	bl	800556c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1e:	f7ff fbc3 	bl	80002a8 <main>

08000b22 <LoopForever>:

LoopForever:
    b LoopForever
 8000b22:	e7fe      	b.n	8000b22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b24:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	200004c0 	.word	0x200004c0
  ldr r2, =_sidata
 8000b30:	0800561c 	.word	0x0800561c
  ldr r2, =_sbss
 8000b34:	200004c0 	.word	0x200004c0
  ldr r4, =_ebss
 8000b38:	20000be0 	.word	0x20000be0

08000b3c <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <CAN_RX0_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_Init+0x28>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_Init+0x28>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f001 fa93 	bl	800207c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	200f      	movs	r0, #15
 8000b58:	f000 f808 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff fd88 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40022000 	.word	0x40022000

08000b6c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x54>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_InitTick+0x58>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 fab9 	bl	8002102 <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e00e      	b.n	8000bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d80a      	bhi.n	8000bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f001 fa73 	bl	8002092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bac:	4a06      	ldr	r2, [pc, #24]	; (8000bc8 <HAL_InitTick+0x5c>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200004b4 	.word	0x200004b4
 8000bc4:	200004bc 	.word	0x200004bc
 8000bc8:	200004b8 	.word	0x200004b8

08000bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x20>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x24>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_IncTick+0x24>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200004bc 	.word	0x200004bc
 8000bf0:	20000bdc 	.word	0x20000bdc

08000bf4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_GetTick+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000bdc 	.word	0x20000bdc

08000c0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0a2      	sub	sp, #136	; 0x88
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __IO uint32_t wait_loop_index = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e1a7      	b.n	8000fba <HAL_ADC_Init+0x372>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	f003 0310 	and.w	r3, r3, #16
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f040 808e 	bne.w	8000d9a <HAL_ADC_Init+0x152>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d169      	bne.n	8000d5a <HAL_ADC_Init+0x112>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a80      	ldr	r2, [pc, #512]	; (8000ea4 <HAL_ADC_Init+0x25c>)
 8000ca4:	651a      	str	r2, [r3, #80]	; 0x50
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4a7f      	ldr	r2, [pc, #508]	; (8000ea8 <HAL_ADC_Init+0x260>)
 8000caa:	655a      	str	r2, [r3, #84]	; 0x54
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a7f      	ldr	r2, [pc, #508]	; (8000eac <HAL_ADC_Init+0x264>)
 8000cb0:	659a      	str	r2, [r3, #88]	; 0x58
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a7e      	ldr	r2, [pc, #504]	; (8000eb0 <HAL_ADC_Init+0x268>)
 8000cb6:	65da      	str	r2, [r3, #92]	; 0x5c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a7e      	ldr	r2, [pc, #504]	; (8000eb4 <HAL_ADC_Init+0x26c>)
 8000cbc:	661a      	str	r2, [r3, #96]	; 0x60
    
    if (hadc->MspInitCallback == NULL)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d102      	bne.n	8000ccc <HAL_ADC_Init+0x84>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a7b      	ldr	r2, [pc, #492]	; (8000eb8 <HAL_ADC_Init+0x270>)
 8000cca:	665a      	str	r2, [r3, #100]	; 0x64
    }
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d13b      	bne.n	8000d5a <HAL_ADC_Init+0x112>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f001 f870 	bl	8001dc8 <ADC_Disable>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 0310 	and.w	r3, r3, #16
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d12f      	bne.n	8000d5a <HAL_ADC_Init+0x112>
 8000cfa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d12b      	bne.n	8000d5a <HAL_ADC_Init+0x112>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d0a:	f023 0302 	bic.w	r3, r3, #2
 8000d0e:	f043 0202 	orr.w	r2, r3, #2
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	689a      	ldr	r2, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000d24:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d34:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d36:	4b61      	ldr	r3, [pc, #388]	; (8000ebc <HAL_ADC_Init+0x274>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a61      	ldr	r2, [pc, #388]	; (8000ec0 <HAL_ADC_Init+0x278>)
 8000d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d40:	0c9a      	lsrs	r2, r3, #18
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000d4c:	e002      	b.n	8000d54 <HAL_ADC_Init+0x10c>
          {
            wait_loop_index--;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f9      	bne.n	8000d4e <HAL_ADC_Init+0x106>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d007      	beq.n	8000d78 <HAL_ADC_Init+0x130>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d76:	d110      	bne.n	8000d9a <HAL_ADC_Init+0x152>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f023 0312 	bic.w	r3, r3, #18
 8000d80:	f043 0210 	orr.w	r2, r3, #16
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8c:	f043 0201 	orr.w	r2, r3, #1
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 80fc 	bne.w	8000fa0 <HAL_ADC_Init+0x358>
 8000da8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f040 80f7 	bne.w	8000fa0 <HAL_ADC_Init+0x358>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f040 80ef 	bne.w	8000fa0 <HAL_ADC_Init+0x358>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000dca:	f043 0202 	orr.w	r2, r3, #2
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	; (8000ec4 <HAL_ADC_Init+0x27c>)
 8000dd4:	67fb      	str	r3, [r7, #124]	; 0x7c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dde:	d102      	bne.n	8000de6 <HAL_ADC_Init+0x19e>
 8000de0:	4b39      	ldr	r3, [pc, #228]	; (8000ec8 <HAL_ADC_Init+0x280>)
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	e002      	b.n	8000dec <HAL_ADC_Init+0x1a4>
 8000de6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dea:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d108      	bne.n	8000e0c <HAL_ADC_Init+0x1c4>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d101      	bne.n	8000e0c <HAL_ADC_Init+0x1c4>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <HAL_ADC_Init+0x1c6>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d11c      	bne.n	8000e4c <HAL_ADC_Init+0x204>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e12:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d010      	beq.n	8000e3a <HAL_ADC_Init+0x1f2>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d107      	bne.n	8000e34 <HAL_ADC_Init+0x1ec>
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d101      	bne.n	8000e34 <HAL_ADC_Init+0x1ec>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <HAL_ADC_Init+0x1ee>
 8000e34:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d108      	bne.n	8000e4c <HAL_ADC_Init+0x204>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000e3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	431a      	orrs	r2, r3
 8000e48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e4a:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7e5b      	ldrb	r3, [r3, #25]
 8000e50:	035b      	lsls	r3, r3, #13
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e56:	2a01      	cmp	r2, #1
 8000e58:	d002      	beq.n	8000e60 <HAL_ADC_Init+0x218>
 8000e5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e5e:	e000      	b.n	8000e62 <HAL_ADC_Init+0x21a>
 8000e60:	2200      	movs	r2, #0
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000e74:	4313      	orrs	r3, r2
 8000e76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d131      	bne.n	8000ee8 <HAL_ADC_Init+0x2a0>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7e5b      	ldrb	r3, [r3, #25]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d11f      	bne.n	8000ecc <HAL_ADC_Init+0x284>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	3b01      	subs	r3, #1
 8000e92:	045a      	lsls	r2, r3, #17
 8000e94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000ea2:	e021      	b.n	8000ee8 <HAL_ADC_Init+0x2a0>
 8000ea4:	08000651 	.word	0x08000651
 8000ea8:	08000c0d 	.word	0x08000c0d
 8000eac:	08000c21 	.word	0x08000c21
 8000eb0:	08000c35 	.word	0x08000c35
 8000eb4:	08001599 	.word	0x08001599
 8000eb8:	080006b9 	.word	0x080006b9
 8000ebc:	200004b4 	.word	0x200004b4
 8000ec0:	431bde83 	.word	0x431bde83
 8000ec4:	50000300 	.word	0x50000300
 8000ec8:	50000100 	.word	0x50000100
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000ed4:	f043 0220 	orr.w	r2, r3, #32
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee0:	f043 0201 	orr.w	r2, r3, #1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d009      	beq.n	8000f04 <HAL_ADC_Init+0x2bc>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000efe:	4313      	orrs	r3, r2
 8000f00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 030c 	and.w	r3, r3, #12
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d116      	bne.n	8000f40 <HAL_ADC_Init+0x2f8>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f20:	f023 0302 	bic.w	r3, r3, #2
 8000f24:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7e1b      	ldrb	r3, [r3, #24]
 8000f2a:	039a      	lsls	r2, r3, #14
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4313      	orrs	r3, r2
 8000f36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <HAL_ADC_Init+0x37c>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6812      	ldr	r2, [r2, #0]
 8000f4e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000f52:	430b      	orrs	r3, r1
 8000f54:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d10c      	bne.n	8000f78 <HAL_ADC_Init+0x330>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f023 010f 	bic.w	r1, r3, #15
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	1e5a      	subs	r2, r3, #1
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	430a      	orrs	r2, r1
 8000f74:	631a      	str	r2, [r3, #48]	; 0x30
 8000f76:	e007      	b.n	8000f88 <HAL_ADC_Init+0x340>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 020f 	bic.w	r2, r2, #15
 8000f86:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	f043 0201 	orr.w	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f9e:	e00a      	b.n	8000fb6 <HAL_ADC_Init+0x36e>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f023 0312 	bic.w	r3, r3, #18
 8000fa8:	f043 0210 	orr.w	r2, r3, #16
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000fb6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3788      	adds	r7, #136	; 0x88
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	fff0c007 	.word	0xfff0c007

08000fc8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f040 809c 	bne.w	800111c <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d101      	bne.n	8000ff2 <HAL_ADC_Start+0x2a>
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e097      	b.n	8001122 <HAL_ADC_Start+0x15a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 fe80 	bl	8001d00 <ADC_Enable>
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f040 8083 	bne.w	8001112 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001020:	4b42      	ldr	r3, [pc, #264]	; (800112c <HAL_ADC_Start+0x164>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <HAL_ADC_Start+0x6e>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001034:	d115      	bne.n	8001062 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d027      	beq.n	80010a0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001058:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001060:	e01e      	b.n	80010a0 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001076:	d004      	beq.n	8001082 <HAL_ADC_Start+0xba>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a2c      	ldr	r2, [pc, #176]	; (8001130 <HAL_ADC_Start+0x168>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10e      	bne.n	80010a0 <HAL_ADC_Start+0xd8>
 8001082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d007      	beq.n	80010a0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001098:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010ac:	d106      	bne.n	80010bc <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f023 0206 	bic.w	r2, r3, #6
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44
 80010ba:	e002      	b.n	80010c2 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	221c      	movs	r2, #28
 80010d0:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80010d2:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_ADC_Start+0x164>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 031f 	and.w	r3, r3, #31
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d010      	beq.n	8001100 <HAL_ADC_Start+0x138>
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_ADC_Start+0x164>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 031f 	and.w	r3, r3, #31
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d00a      	beq.n	8001100 <HAL_ADC_Start+0x138>
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_ADC_Start+0x164>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 031f 	and.w	r3, r3, #31
 80010f2:	2b09      	cmp	r3, #9
 80010f4:	d004      	beq.n	8001100 <HAL_ADC_Start+0x138>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fe:	d10f      	bne.n	8001120 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0204 	orr.w	r2, r2, #4
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	e006      	b.n	8001120 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800111a:	e001      	b.n	8001120 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800111c:	2302      	movs	r3, #2
 800111e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	50000300 	.word	0x50000300
 8001130:	50000100 	.word	0x50000100

08001134 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	2b04      	cmp	r3, #4
 8001170:	d106      	bne.n	8001180 <HAL_ADC_IRQHandler+0x30>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0304 	and.w	r3, r3, #4
 800117c:	2b04      	cmp	r3, #4
 800117e:	d00d      	beq.n	800119c <HAL_ADC_IRQHandler+0x4c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800118a:	2b08      	cmp	r3, #8
 800118c:	d17b      	bne.n	8001286 <HAL_ADC_IRQHandler+0x136>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	2b08      	cmp	r3, #8
 800119a:	d174      	bne.n	8001286 <HAL_ADC_IRQHandler+0x136>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f003 0310 	and.w	r3, r3, #16
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d105      	bne.n	80011b4 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80011b4:	4b89      	ldr	r3, [pc, #548]	; (80013dc <HAL_ADC_IRQHandler+0x28c>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 031f 	and.w	r3, r3, #31
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d010      	beq.n	80011e2 <HAL_ADC_IRQHandler+0x92>
 80011c0:	4b86      	ldr	r3, [pc, #536]	; (80013dc <HAL_ADC_IRQHandler+0x28c>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d00a      	beq.n	80011e2 <HAL_ADC_IRQHandler+0x92>
 80011cc:	4b83      	ldr	r3, [pc, #524]	; (80013dc <HAL_ADC_IRQHandler+0x28c>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 031f 	and.w	r3, r3, #31
 80011d4:	2b09      	cmp	r3, #9
 80011d6:	d004      	beq.n	80011e2 <HAL_ADC_IRQHandler+0x92>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011e0:	d104      	bne.n	80011ec <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	e003      	b.n	80011f4 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80011ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d139      	bne.n	8001276 <HAL_ADC_IRQHandler+0x126>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001208:	2b00      	cmp	r3, #0
 800120a:	d134      	bne.n	8001276 <HAL_ADC_IRQHandler+0x126>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b08      	cmp	r3, #8
 8001218:	d12d      	bne.n	8001276 <HAL_ADC_IRQHandler+0x126>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d11a      	bne.n	800125e <HAL_ADC_IRQHandler+0x10e>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 020c 	bic.w	r2, r2, #12
 8001236:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d112      	bne.n	8001276 <HAL_ADC_IRQHandler+0x126>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f043 0201 	orr.w	r2, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	; 0x40
 800125c:	e00b      	b.n	8001276 <HAL_ADC_IRQHandler+0x126>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f043 0210 	orr.w	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f043 0201 	orr.w	r2, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	645a      	str	r2, [r3, #68]	; 0x44
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	4798      	blx	r3
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0320 	and.w	r3, r3, #32
 8001290:	2b20      	cmp	r3, #32
 8001292:	d106      	bne.n	80012a2 <HAL_ADC_IRQHandler+0x152>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	2b20      	cmp	r3, #32
 80012a0:	d00f      	beq.n	80012c2 <HAL_ADC_IRQHandler+0x172>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80012ac:	2b40      	cmp	r3, #64	; 0x40
 80012ae:	f040 80ab 	bne.w	8001408 <HAL_ADC_IRQHandler+0x2b8>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012bc:	2b40      	cmp	r3, #64	; 0x40
 80012be:	f040 80a3 	bne.w	8001408 <HAL_ADC_IRQHandler+0x2b8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80012ce:	4b43      	ldr	r3, [pc, #268]	; (80013dc <HAL_ADC_IRQHandler+0x28c>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d010      	beq.n	80012fc <HAL_ADC_IRQHandler+0x1ac>
 80012da:	4b40      	ldr	r3, [pc, #256]	; (80013dc <HAL_ADC_IRQHandler+0x28c>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	2b05      	cmp	r3, #5
 80012e4:	d00a      	beq.n	80012fc <HAL_ADC_IRQHandler+0x1ac>
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <HAL_ADC_IRQHandler+0x28c>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	2b09      	cmp	r3, #9
 80012f0:	d004      	beq.n	80012fc <HAL_ADC_IRQHandler+0x1ac>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012fa:	d104      	bne.n	8001306 <HAL_ADC_IRQHandler+0x1b6>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	e003      	b.n	800130e <HAL_ADC_IRQHandler+0x1be>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001306:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001314:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d16d      	bne.n	80013f8 <HAL_ADC_IRQHandler+0x2a8>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_ADC_IRQHandler+0x1ee>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001330:	2b00      	cmp	r3, #0
 8001332:	d161      	bne.n	80013f8 <HAL_ADC_IRQHandler+0x2a8>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800133a:	2b00      	cmp	r3, #0
 800133c:	d15c      	bne.n	80013f8 <HAL_ADC_IRQHandler+0x2a8>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001348:	2b40      	cmp	r3, #64	; 0x40
 800134a:	d155      	bne.n	80013f8 <HAL_ADC_IRQHandler+0x2a8>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <HAL_ADC_IRQHandler+0x28c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 031f 	and.w	r3, r3, #31
 8001354:	2b00      	cmp	r3, #0
 8001356:	d010      	beq.n	800137a <HAL_ADC_IRQHandler+0x22a>
 8001358:	4b20      	ldr	r3, [pc, #128]	; (80013dc <HAL_ADC_IRQHandler+0x28c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	2b06      	cmp	r3, #6
 8001362:	d00a      	beq.n	800137a <HAL_ADC_IRQHandler+0x22a>
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <HAL_ADC_IRQHandler+0x28c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 031f 	and.w	r3, r3, #31
 800136c:	2b07      	cmp	r3, #7
 800136e:	d004      	beq.n	800137a <HAL_ADC_IRQHandler+0x22a>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001378:	d104      	bne.n	8001384 <HAL_ADC_IRQHandler+0x234>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	e003      	b.n	800138c <HAL_ADC_IRQHandler+0x23c>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001384:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d130      	bne.n	80013f8 <HAL_ADC_IRQHandler+0x2a8>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d11d      	bne.n	80013e0 <HAL_ADC_IRQHandler+0x290>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80013b2:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d115      	bne.n	80013f8 <HAL_ADC_IRQHandler+0x2a8>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f043 0201 	orr.w	r2, r3, #1
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
 80013d8:	e00e      	b.n	80013f8 <HAL_ADC_IRQHandler+0x2a8>
 80013da:	bf00      	nop
 80013dc:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	f043 0210 	orr.w	r2, r3, #16
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	f043 0201 	orr.w	r2, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	4798      	blx	r3
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2260      	movs	r2, #96	; 0x60
 8001406:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001412:	2b80      	cmp	r3, #128	; 0x80
 8001414:	d114      	bne.n	8001440 <HAL_ADC_IRQHandler+0x2f0>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001420:	2b80      	cmp	r3, #128	; 0x80
 8001422:	d10d      	bne.n	8001440 <HAL_ADC_IRQHandler+0x2f0>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	4798      	blx	r3
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800144e:	d115      	bne.n	800147c <HAL_ADC_IRQHandler+0x32c>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800145e:	d10d      	bne.n	800147c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 f8a7 	bl	80015c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800147a:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800148a:	d115      	bne.n	80014b8 <HAL_ADC_IRQHandler+0x368>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800149a:	d10d      	bne.n	80014b8 <HAL_ADC_IRQHandler+0x368>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f893 	bl	80015d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0310 	and.w	r3, r3, #16
 80014c2:	2b10      	cmp	r3, #16
 80014c4:	d13e      	bne.n	8001544 <HAL_ADC_IRQHandler+0x3f4>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	2b10      	cmp	r3, #16
 80014d2:	d137      	bne.n	8001544 <HAL_ADC_IRQHandler+0x3f4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d102      	bne.n	80014e2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1U;
 80014dc:	2301      	movs	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e019      	b.n	8001516 <HAL_ADC_IRQHandler+0x3c6>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e2:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <HAL_ADC_IRQHandler+0x444>)
 80014e4:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_ADC_IRQHandler+0x3b6>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d10a      	bne.n	8001516 <HAL_ADC_IRQHandler+0x3c6>
        {
          overrun_error = 1U;  
 8001500:	2301      	movs	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	e007      	b.n	8001516 <HAL_ADC_IRQHandler+0x3c6>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_ADC_IRQHandler+0x3c6>
        {
          overrun_error = 1U;  
 8001512:	2301      	movs	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d10f      	bne.n	800153c <HAL_ADC_IRQHandler+0x3ec>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152c:	f043 0202 	orr.w	r2, r3, #2
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2210      	movs	r2, #16
 8001542:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001552:	d11b      	bne.n	800158c <HAL_ADC_IRQHandler+0x43c>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001562:	d113      	bne.n	800158c <HAL_ADC_IRQHandler+0x43c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001574:	f043 0208 	orr.w	r2, r3, #8
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001584:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f810 	bl	80015ac <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800158c:	bf00      	nop
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	50000300 	.word	0x50000300

08001598 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b0a3      	sub	sp, #140	; 0x8c
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001602:	2b01      	cmp	r3, #1
 8001604:	d101      	bne.n	800160a <HAL_ADC_ConfigChannel+0x22>
 8001606:	2302      	movs	r3, #2
 8001608:	e2a9      	b.n	8001b5e <HAL_ADC_ConfigChannel+0x576>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 828d 	bne.w	8001b3c <HAL_ADC_ConfigChannel+0x554>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b04      	cmp	r3, #4
 8001628:	d81c      	bhi.n	8001664 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	4413      	add	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	461a      	mov	r2, r3
 800163e:	231f      	movs	r3, #31
 8001640:	4093      	lsls	r3, r2
 8001642:	43db      	mvns	r3, r3
 8001644:	4019      	ands	r1, r3
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	fa00 f203 	lsl.w	r2, r0, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	631a      	str	r2, [r3, #48]	; 0x30
 8001662:	e063      	b.n	800172c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b09      	cmp	r3, #9
 800166a:	d81e      	bhi.n	80016aa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	3b1e      	subs	r3, #30
 8001680:	221f      	movs	r2, #31
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	4019      	ands	r1, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	3b1e      	subs	r3, #30
 800169c:	fa00 f203 	lsl.w	r2, r0, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	635a      	str	r2, [r3, #52]	; 0x34
 80016a8:	e040      	b.n	800172c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b0e      	cmp	r3, #14
 80016b0:	d81e      	bhi.n	80016f0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	3b3c      	subs	r3, #60	; 0x3c
 80016c6:	221f      	movs	r2, #31
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4019      	ands	r1, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	3b3c      	subs	r3, #60	; 0x3c
 80016e2:	fa00 f203 	lsl.w	r2, r0, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	639a      	str	r2, [r3, #56]	; 0x38
 80016ee:	e01d      	b.n	800172c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	3b5a      	subs	r3, #90	; 0x5a
 8001704:	221f      	movs	r2, #31
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	4019      	ands	r1, r3
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	3b5a      	subs	r3, #90	; 0x5a
 8001720:	fa00 f203 	lsl.w	r2, r0, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 80e9 	bne.w	800190e <HAL_ADC_ConfigChannel+0x326>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b09      	cmp	r3, #9
 8001742:	d91c      	bls.n	800177e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6999      	ldr	r1, [r3, #24]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	3b1e      	subs	r3, #30
 8001756:	2207      	movs	r2, #7
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	4019      	ands	r1, r3
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	6898      	ldr	r0, [r3, #8]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	3b1e      	subs	r3, #30
 8001770:	fa00 f203 	lsl.w	r2, r0, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	619a      	str	r2, [r3, #24]
 800177c:	e019      	b.n	80017b2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6959      	ldr	r1, [r3, #20]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	2207      	movs	r2, #7
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	4019      	ands	r1, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6898      	ldr	r0, [r3, #8]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	fa00 f203 	lsl.w	r2, r0, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	08db      	lsrs	r3, r3, #3
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d852      	bhi.n	800187c <HAL_ADC_ConfigChannel+0x294>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <HAL_ADC_ConfigChannel+0x1f4>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	08001811 	.word	0x08001811
 80017e4:	08001835 	.word	0x08001835
 80017e8:	08001859 	.word	0x08001859
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017f2:	4ba0      	ldr	r3, [pc, #640]	; (8001a74 <HAL_ADC_ConfigChannel+0x48c>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	0691      	lsls	r1, r2, #26
 80017fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001800:	430a      	orrs	r2, r1
 8001802:	431a      	orrs	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800180c:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800180e:	e081      	b.n	8001914 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001816:	4b97      	ldr	r3, [pc, #604]	; (8001a74 <HAL_ADC_ConfigChannel+0x48c>)
 8001818:	4013      	ands	r3, r2
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	0691      	lsls	r1, r2, #26
 8001820:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001824:	430a      	orrs	r2, r1
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001830:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001832:	e06f      	b.n	8001914 <HAL_ADC_ConfigChannel+0x32c>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800183a:	4b8e      	ldr	r3, [pc, #568]	; (8001a74 <HAL_ADC_ConfigChannel+0x48c>)
 800183c:	4013      	ands	r3, r2
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	0691      	lsls	r1, r2, #26
 8001844:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001848:	430a      	orrs	r2, r1
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001854:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001856:	e05d      	b.n	8001914 <HAL_ADC_ConfigChannel+0x32c>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800185e:	4b85      	ldr	r3, [pc, #532]	; (8001a74 <HAL_ADC_ConfigChannel+0x48c>)
 8001860:	4013      	ands	r3, r2
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	0691      	lsls	r1, r2, #26
 8001868:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800186c:	430a      	orrs	r2, r1
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001878:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800187a:	e04b      	b.n	8001914 <HAL_ADC_ConfigChannel+0x32c>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001882:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	069b      	lsls	r3, r3, #26
 800188c:	429a      	cmp	r2, r3
 800188e:	d107      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x2b8>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800189e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	069b      	lsls	r3, r3, #26
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d107      	bne.n	80018c4 <HAL_ADC_ConfigChannel+0x2dc>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018c2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	069b      	lsls	r3, r3, #26
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d107      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x300>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018e6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	069b      	lsls	r3, r3, #26
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d10a      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x32a>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800190a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800190c:	e001      	b.n	8001912 <HAL_ADC_ConfigChannel+0x32a>
    }

  }
 800190e:	bf00      	nop
 8001910:	e000      	b.n	8001914 <HAL_ADC_ConfigChannel+0x32c>
      break;
 8001912:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d108      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x34c>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x34c>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_ADC_ConfigChannel+0x34e>
 8001934:	2300      	movs	r3, #0
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 810b 	bne.w	8001b52 <HAL_ADC_ConfigChannel+0x56a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d00f      	beq.n	8001964 <HAL_ADC_ConfigChannel+0x37c>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2201      	movs	r2, #1
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	400a      	ands	r2, r1
 800195e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001962:	e049      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x410>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2201      	movs	r2, #1
 8001972:	409a      	lsls	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b09      	cmp	r3, #9
 8001984:	d91c      	bls.n	80019c0 <HAL_ADC_ConfigChannel+0x3d8>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6999      	ldr	r1, [r3, #24]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	3b1b      	subs	r3, #27
 8001998:	2207      	movs	r2, #7
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	4019      	ands	r1, r3
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	6898      	ldr	r0, [r3, #8]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	3b1b      	subs	r3, #27
 80019b2:	fa00 f203 	lsl.w	r2, r0, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	619a      	str	r2, [r3, #24]
 80019be:	e01b      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x410>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6959      	ldr	r1, [r3, #20]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	2207      	movs	r2, #7
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	4019      	ands	r1, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6898      	ldr	r0, [r3, #8]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	4613      	mov	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	fa00 f203 	lsl.w	r2, r0, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_ADC_ConfigChannel+0x490>)
 80019fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b10      	cmp	r3, #16
 8001a02:	d105      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x428>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d015      	beq.n	8001a3c <HAL_ADC_ConfigChannel+0x454>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001a14:	2b11      	cmp	r3, #17
 8001a16:	d105      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x43c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00b      	beq.n	8001a3c <HAL_ADC_ConfigChannel+0x454>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001a28:	2b12      	cmp	r3, #18
 8001a2a:	f040 8092 	bne.w	8001b52 <HAL_ADC_ConfigChannel+0x56a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001a2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 808b 	bne.w	8001b52 <HAL_ADC_ConfigChannel+0x56a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a44:	d102      	bne.n	8001a4c <HAL_ADC_ConfigChannel+0x464>
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_ADC_ConfigChannel+0x494>)
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	e002      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x46a>
 8001a4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a50:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d10f      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x498>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x498>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e007      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x49a>
 8001a72:	bf00      	nop
 8001a74:	83fff000 	.word	0x83fff000
 8001a78:	50000300 	.word	0x50000300
 8001a7c:	50000100 	.word	0x50000100
 8001a80:	2300      	movs	r3, #0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d150      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x540>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a86:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d010      	beq.n	8001aae <HAL_ADC_ConfigChannel+0x4c6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d107      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x4c0>
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d101      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x4c0>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x4c2>
 8001aa8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d13c      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x540>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b10      	cmp	r3, #16
 8001ab4:	d11d      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x50a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001abe:	d118      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001ac0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ac8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aca:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <HAL_ADC_ConfigChannel+0x584>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <HAL_ADC_ConfigChannel+0x588>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9a      	lsrs	r2, r3, #18
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001ae2:	e002      	b.n	8001aea <HAL_ADC_ConfigChannel+0x502>
          {
            wait_loop_index--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x4fc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001af0:	e02e      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x568>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b11      	cmp	r3, #17
 8001af8:	d10b      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x52a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b02:	d106      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x52a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001b04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001b0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b0e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b10:	e01e      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x568>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d11a      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001b1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b24:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b26:	e013      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x568>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f043 0220 	orr.w	r2, r3, #32
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001b3a:	e00a      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x56a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f043 0220 	orr.w	r2, r3, #32
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001b4e:	e000      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x56a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001b50:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b5a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	378c      	adds	r7, #140	; 0x8c
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200004b4 	.word	0x200004b4
 8001b70:	431bde83 	.word	0x431bde83

08001b74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b0a1      	sub	sp, #132	; 0x84
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b8c:	d102      	bne.n	8001b94 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001b8e:	4b5a      	ldr	r3, [pc, #360]	; (8001cf8 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e002      	b.n	8001b9a <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001b94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b98:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0a2      	b.n	8001cea <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e09b      	b.n	8001cea <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d17f      	bne.n	8001cc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d179      	bne.n	8001cc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bd4:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001bd6:	67bb      	str	r3, [r7, #120]	; 0x78
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d040      	beq.n	8001c62 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bf2:	035b      	lsls	r3, r3, #13
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bfa:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d108      	bne.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d15c      	bne.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001c3e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d14b      	bne.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c4c:	f023 030f 	bic.w	r3, r3, #15
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	6811      	ldr	r1, [r2, #0]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	6892      	ldr	r2, [r2, #8]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c5e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c60:	e03c      	b.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c6c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d108      	bne.n	8001c8e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d123      	bne.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d107      	bne.n	8001cb0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001cb0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d112      	bne.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001cbe:	f023 030f 	bic.w	r3, r3, #15
 8001cc2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001cc4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cc6:	e009      	b.n	8001cdc <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f043 0220 	orr.w	r2, r3, #32
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001cda:	e000      	b.n	8001cde <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001cdc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ce6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
} 
 8001cea:	4618      	mov	r0, r3
 8001cec:	3784      	adds	r7, #132	; 0x84
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	50000100 	.word	0x50000100
 8001cfc:	50000300 	.word	0x50000300

08001d00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d108      	bne.n	8001d2c <ADC_Enable+0x2c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <ADC_Enable+0x2c>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <ADC_Enable+0x2e>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d143      	bne.n	8001dba <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	4b22      	ldr	r3, [pc, #136]	; (8001dc4 <ADC_Enable+0xc4>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00d      	beq.n	8001d5c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f043 0210 	orr.w	r2, r3, #16
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d50:	f043 0201 	orr.w	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e02f      	b.n	8001dbc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001d6c:	f7fe ff42 	bl	8000bf4 <HAL_GetTick>
 8001d70:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d72:	e01b      	b.n	8001dac <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d74:	f7fe ff3e 	bl	8000bf4 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d914      	bls.n	8001dac <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d00d      	beq.n	8001dac <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f043 0210 	orr.w	r2, r3, #16
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e007      	b.n	8001dbc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d1dc      	bne.n	8001d74 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	8000003f 	.word	0x8000003f

08001dc8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d108      	bne.n	8001df4 <ADC_Disable+0x2c>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <ADC_Disable+0x2c>
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <ADC_Disable+0x2e>
 8001df4:	2300      	movs	r3, #0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d047      	beq.n	8001e8a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030d 	and.w	r3, r3, #13
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d10f      	bne.n	8001e28 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0202 	orr.w	r2, r2, #2
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001e20:	f7fe fee8 	bl	8000bf4 <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e26:	e029      	b.n	8001e7c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f043 0210 	orr.w	r2, r3, #16
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e023      	b.n	8001e8c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e44:	f7fe fed6 	bl	8000bf4 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d914      	bls.n	8001e7c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d10d      	bne.n	8001e7c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e64:	f043 0210 	orr.w	r2, r3, #16
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e007      	b.n	8001e8c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d0dc      	beq.n	8001e44 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4907      	ldr	r1, [pc, #28]	; (8001f30 <__NVIC_EnableIRQ+0x38>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db12      	blt.n	8001f6c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	490a      	ldr	r1, [pc, #40]	; (8001f78 <__NVIC_DisableIRQ+0x44>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	3320      	adds	r3, #32
 8001f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f60:	f3bf 8f4f 	dsb	sy
}
 8001f64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f66:	f3bf 8f6f 	isb	sy
}
 8001f6a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	; (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
         );
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002048:	d301      	bcc.n	800204e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204a:	2301      	movs	r3, #1
 800204c:	e00f      	b.n	800206e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <SysTick_Config+0x40>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002056:	210f      	movs	r1, #15
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f7ff ff8e 	bl	8001f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <SysTick_Config+0x40>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <SysTick_Config+0x40>)
 8002068:	2207      	movs	r2, #7
 800206a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	e000e010 	.word	0xe000e010

0800207c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff05 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a4:	f7ff ff1a 	bl	8001edc <__NVIC_GetPriorityGrouping>
 80020a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f7ff ff8e 	bl	8001fd0 <NVIC_EncodePriority>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff5d 	bl	8001f7c <__NVIC_SetPriority>
}
 80020c2:	bf00      	nop
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff0d 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff1d 	bl	8001f34 <__NVIC_DisableIRQ>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ff94 	bl	8002038 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e03b      	b.n	80021a6 <HAL_DAC_Init+0x8a>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	791b      	ldrb	r3, [r3, #4]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d12c      	bne.n	8002192 <HAL_DAC_Init+0x76>
  {  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  /* Init the DAC Callback settings */
  hdac->ConvCpltCallbackCh1           = HAL_DAC_ConvCpltCallbackCh1;    
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <HAL_DAC_Init+0x94>)
 800213c:	615a      	str	r2, [r3, #20]
  hdac->ConvHalfCpltCallbackCh1       = HAL_DAC_ConvHalfCpltCallbackCh1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a1c      	ldr	r2, [pc, #112]	; (80021b4 <HAL_DAC_Init+0x98>)
 8002142:	619a      	str	r2, [r3, #24]
  hdac->ErrorCallbackCh1              = HAL_DAC_ErrorCallbackCh1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <HAL_DAC_Init+0x9c>)
 8002148:	61da      	str	r2, [r3, #28]
  hdac->DMAUnderrunCallbackCh1        = HAL_DAC_DMAUnderrunCallbackCh1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <HAL_DAC_Init+0xa0>)
 800214e:	621a      	str	r2, [r3, #32]
#if defined(DAC_CHANNEL2_SUPPORT)
  hdac->ConvCpltCallbackCh2           = HAL_DACEx_ConvCpltCallbackCh2;    
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <HAL_DAC_Init+0xa4>)
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
  hdac->ConvHalfCpltCallbackCh2       = HAL_DACEx_ConvHalfCpltCallbackCh2;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a1a      	ldr	r2, [pc, #104]	; (80021c4 <HAL_DAC_Init+0xa8>)
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
  hdac->ErrorCallbackCh2              = HAL_DACEx_ErrorCallbackCh2;       
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <HAL_DAC_Init+0xac>)
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
  hdac->DMAUnderrunCallbackCh2        = HAL_DACEx_DMAUnderrunCallbackCh2; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a19      	ldr	r2, [pc, #100]	; (80021cc <HAL_DAC_Init+0xb0>)
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* DAC_CHANNEL2_SUPPORT */
  if(hdac->MspInitCallback == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <HAL_DAC_Init+0x5a>
  {
    hdac->MspInitCallback               = HAL_DAC_MspInit;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <HAL_DAC_Init+0xb4>)
 8002174:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(hdac->MspDeInitCallback == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <HAL_DAC_Init+0x68>
  {
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <HAL_DAC_Init+0xb8>)
 8002182:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	715a      	strb	r2, [r3, #5]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	4798      	blx	r3
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	080021d9 	.word	0x080021d9
 80021b4:	080021ed 	.word	0x080021ed
 80021b8:	08002201 	.word	0x08002201
 80021bc:	08002215 	.word	0x08002215
 80021c0:	08002491 	.word	0x08002491
 80021c4:	080024a5 	.word	0x080024a5
 80021c8:	080024b9 	.word	0x080024b9
 80021cc:	080024cd 	.word	0x080024cd
 80021d0:	08000799 	.word	0x08000799
 80021d4:	08000825 	.word	0x08000825

080021d8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002228:	b480      	push	{r7}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d105      	bne.n	8002252 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	3308      	adds	r3, #8
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	e004      	b.n	800225c <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	3314      	adds	r3, #20
 800225a:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	461a      	mov	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	795b      	ldrb	r3, [r3, #5]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_DAC_Start+0x16>
 8002284:	2302      	movs	r3, #2
 8002286:	e039      	b.n	80022fc <HAL_DAC_Start+0x8a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	2201      	movs	r2, #1
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	409a      	lsls	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80022b8:	2b3c      	cmp	r3, #60	; 0x3c
 80022ba:	d118      	bne.n	80022ee <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	e00f      	b.n	80022ee <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022d8:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80022dc:	d107      	bne.n	80022ee <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0202 	orr.w	r2, r2, #2
 80022ec:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800231a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800231e:	d121      	bne.n	8002364 <HAL_DAC_IRQHandler+0x5c>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232e:	d119      	bne.n	8002364 <HAL_DAC_IRQHandler+0x5c>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2204      	movs	r2, #4
 8002334:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800234a:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800235a:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800236e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002372:	d121      	bne.n	80023b8 <HAL_DAC_IRQHandler+0xb0>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800237e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002382:	d119      	bne.n	80023b8 <HAL_DAC_IRQHandler+0xb0>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2204      	movs	r2, #4
 8002388:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f043 0202 	orr.w	r2, r3, #2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800239e:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80023ae:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	4798      	blx	r3
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
#endif
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	795b      	ldrb	r3, [r3, #5]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_DAC_ConfigChannel+0x20>
 80023dc:	2302      	movs	r3, #2
 80023de:	e04e      	b.n	800247e <HAL_DAC_ConfigChannel+0xbe>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2201      	movs	r2, #1
 80023e4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2202      	movs	r2, #2
 80023ea:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a24      	ldr	r2, [pc, #144]	; (800248c <HAL_DAC_ConfigChannel+0xcc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d112      	bne.n	8002424 <HAL_DAC_ConfigChannel+0x64>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10f      	bne.n	8002424 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002404:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	4013      	ands	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	e00e      	b.n	8002442 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8002424:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	4013      	ands	r3, r2
 8002434:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	4313      	orrs	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	22c0      	movs	r2, #192	; 0xc0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	400a      	ands	r2, r1
 800246e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2201      	movs	r2, #1
 8002474:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	371c      	adds	r7, #28
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40007400 	.word	0x40007400

08002490 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e037      	b.n	8002566 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2202      	movs	r2, #2
 80024fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800250c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002510:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800251a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002526:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002532:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f92b 	bl	80027a4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}  
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800257c:	2b02      	cmp	r3, #2
 800257e:	d008      	beq.n	8002592 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2204      	movs	r2, #4
 8002584:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e020      	b.n	80025d4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 020e 	bic.w	r2, r2, #14
 80025a0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f202 	lsl.w	r2, r1, r2
 80025c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d005      	beq.n	8002602 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2204      	movs	r2, #4
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	e027      	b.n	8002652 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 020e 	bic.w	r2, r2, #14
 8002610:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	2101      	movs	r1, #1
 800262c:	fa01 f202 	lsl.w	r2, r1, r2
 8002630:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
    } 
  }
  return status;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	2204      	movs	r2, #4
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d024      	beq.n	80026ce <HAL_DMA_IRQHandler+0x72>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d01f      	beq.n	80026ce <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d107      	bne.n	80026ac <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0204 	bic.w	r2, r2, #4
 80026aa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b4:	2104      	movs	r1, #4
 80026b6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ba:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d06a      	beq.n	800279a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80026cc:	e065      	b.n	800279a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	2202      	movs	r2, #2
 80026d4:	409a      	lsls	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d02c      	beq.n	8002738 <HAL_DMA_IRQHandler+0xdc>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d027      	beq.n	8002738 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10b      	bne.n	800270e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 020a 	bic.w	r2, r2, #10
 8002704:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	2102      	movs	r1, #2
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	2b00      	cmp	r3, #0
 800272c:	d035      	beq.n	800279a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002736:	e030      	b.n	800279a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	2208      	movs	r2, #8
 800273e:	409a      	lsls	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d028      	beq.n	800279a <HAL_DMA_IRQHandler+0x13e>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d023      	beq.n	800279a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 020e 	bic.w	r2, r2, #14
 8002760:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f202 	lsl.w	r2, r1, r2
 8002770:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
    }
  }
}  
 8002798:	e7ff      	b.n	800279a <HAL_DMA_IRQHandler+0x13e>
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <DMA_CalcBaseAndBitshift+0x34>)
 80027b4:	4413      	add	r3, r2
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <DMA_CalcBaseAndBitshift+0x38>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	009a      	lsls	r2, r3, #2
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a06      	ldr	r2, [pc, #24]	; (80027e0 <DMA_CalcBaseAndBitshift+0x3c>)
 80027c8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	bffdfff8 	.word	0xbffdfff8
 80027dc:	cccccccd 	.word	0xcccccccd
 80027e0:	40020000 	.word	0x40020000

080027e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f2:	e14e      	b.n	8002a92 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2101      	movs	r1, #1
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	4013      	ands	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8140 	beq.w	8002a8c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d005      	beq.n	8002824 <HAL_GPIO_Init+0x40>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d130      	bne.n	8002886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800285a:	2201      	movs	r2, #1
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	4013      	ands	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	f003 0201 	and.w	r2, r3, #1
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b03      	cmp	r3, #3
 8002890:	d017      	beq.n	80028c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d123      	bne.n	8002916 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	08da      	lsrs	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3208      	adds	r2, #8
 80028d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	220f      	movs	r2, #15
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	08da      	lsrs	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3208      	adds	r2, #8
 8002910:	6939      	ldr	r1, [r7, #16]
 8002912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0203 	and.w	r2, r3, #3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 809a 	beq.w	8002a8c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002958:	4b55      	ldr	r3, [pc, #340]	; (8002ab0 <HAL_GPIO_Init+0x2cc>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4a54      	ldr	r2, [pc, #336]	; (8002ab0 <HAL_GPIO_Init+0x2cc>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	4b52      	ldr	r3, [pc, #328]	; (8002ab0 <HAL_GPIO_Init+0x2cc>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002970:	4a50      	ldr	r2, [pc, #320]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800299a:	d013      	beq.n	80029c4 <HAL_GPIO_Init+0x1e0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a46      	ldr	r2, [pc, #280]	; (8002ab8 <HAL_GPIO_Init+0x2d4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00d      	beq.n	80029c0 <HAL_GPIO_Init+0x1dc>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a45      	ldr	r2, [pc, #276]	; (8002abc <HAL_GPIO_Init+0x2d8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d007      	beq.n	80029bc <HAL_GPIO_Init+0x1d8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a44      	ldr	r2, [pc, #272]	; (8002ac0 <HAL_GPIO_Init+0x2dc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d101      	bne.n	80029b8 <HAL_GPIO_Init+0x1d4>
 80029b4:	2303      	movs	r3, #3
 80029b6:	e006      	b.n	80029c6 <HAL_GPIO_Init+0x1e2>
 80029b8:	2305      	movs	r3, #5
 80029ba:	e004      	b.n	80029c6 <HAL_GPIO_Init+0x1e2>
 80029bc:	2302      	movs	r3, #2
 80029be:	e002      	b.n	80029c6 <HAL_GPIO_Init+0x1e2>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_GPIO_Init+0x1e2>
 80029c4:	2300      	movs	r3, #0
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	f002 0203 	and.w	r2, r2, #3
 80029cc:	0092      	lsls	r2, r2, #2
 80029ce:	4093      	lsls	r3, r2
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029d6:	4937      	ldr	r1, [pc, #220]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e4:	4b37      	ldr	r3, [pc, #220]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4013      	ands	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a08:	4a2e      	ldr	r2, [pc, #184]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	43db      	mvns	r3, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a32:	4a24      	ldr	r2, [pc, #144]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a38:	4b22      	ldr	r3, [pc, #136]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a5c:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a62:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a86:	4a0f      	ldr	r2, [pc, #60]	; (8002ac4 <HAL_GPIO_Init+0x2e0>)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f47f aea9 	bne.w	80027f4 <HAL_GPIO_Init+0x10>
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	48000400 	.word	0x48000400
 8002abc:	48000800 	.word	0x48000800
 8002ac0:	48000c00 	.word	0x48000c00
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002ad6:	e0b2      	b.n	8002c3e <HAL_GPIO_DeInit+0x176>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80a5 	beq.w	8002c38 <HAL_GPIO_DeInit+0x170>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002aee:	4a5b      	ldr	r2, [pc, #364]	; (8002c5c <HAL_GPIO_DeInit+0x194>)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b16:	d013      	beq.n	8002b40 <HAL_GPIO_DeInit+0x78>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a51      	ldr	r2, [pc, #324]	; (8002c60 <HAL_GPIO_DeInit+0x198>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00d      	beq.n	8002b3c <HAL_GPIO_DeInit+0x74>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a50      	ldr	r2, [pc, #320]	; (8002c64 <HAL_GPIO_DeInit+0x19c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d007      	beq.n	8002b38 <HAL_GPIO_DeInit+0x70>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a4f      	ldr	r2, [pc, #316]	; (8002c68 <HAL_GPIO_DeInit+0x1a0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d101      	bne.n	8002b34 <HAL_GPIO_DeInit+0x6c>
 8002b30:	2303      	movs	r3, #3
 8002b32:	e006      	b.n	8002b42 <HAL_GPIO_DeInit+0x7a>
 8002b34:	2305      	movs	r3, #5
 8002b36:	e004      	b.n	8002b42 <HAL_GPIO_DeInit+0x7a>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e002      	b.n	8002b42 <HAL_GPIO_DeInit+0x7a>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <HAL_GPIO_DeInit+0x7a>
 8002b40:	2300      	movs	r3, #0
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	f002 0203 	and.w	r2, r2, #3
 8002b48:	0092      	lsls	r2, r2, #2
 8002b4a:	4093      	lsls	r3, r2
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d132      	bne.n	8002bb8 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b52:	4b46      	ldr	r3, [pc, #280]	; (8002c6c <HAL_GPIO_DeInit+0x1a4>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	4944      	ldr	r1, [pc, #272]	; (8002c6c <HAL_GPIO_DeInit+0x1a4>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002b60:	4b42      	ldr	r3, [pc, #264]	; (8002c6c <HAL_GPIO_DeInit+0x1a4>)
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	4940      	ldr	r1, [pc, #256]	; (8002c6c <HAL_GPIO_DeInit+0x1a4>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b6e:	4b3f      	ldr	r3, [pc, #252]	; (8002c6c <HAL_GPIO_DeInit+0x1a4>)
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	43db      	mvns	r3, r3
 8002b76:	493d      	ldr	r1, [pc, #244]	; (8002c6c <HAL_GPIO_DeInit+0x1a4>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b7c:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <HAL_GPIO_DeInit+0x1a4>)
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	43db      	mvns	r3, r3
 8002b84:	4939      	ldr	r1, [pc, #228]	; (8002c6c <HAL_GPIO_DeInit+0x1a4>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	220f      	movs	r2, #15
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002b9a:	4a30      	ldr	r2, [pc, #192]	; (8002c5c <HAL_GPIO_DeInit+0x194>)
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	43da      	mvns	r2, r3
 8002baa:	482c      	ldr	r0, [pc, #176]	; (8002c5c <HAL_GPIO_DeInit+0x194>)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2103      	movs	r1, #3
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	401a      	ands	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	08da      	lsrs	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3208      	adds	r2, #8
 8002bd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	08d2      	lsrs	r2, r2, #3
 8002bee:	4019      	ands	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3208      	adds	r2, #8
 8002bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	2103      	movs	r1, #3
 8002c02:	fa01 f303 	lsl.w	r3, r1, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	401a      	ands	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	2101      	movs	r1, #1
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	401a      	ands	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	2103      	movs	r1, #3
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	401a      	ands	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f47f af46 	bne.w	8002ad8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40010000 	.word	0x40010000
 8002c60:	48000400 	.word	0x48000400
 8002c64:	48000800 	.word	0x48000800
 8002c68:	48000c00 	.word	0x48000c00
 8002c6c:	40010400 	.word	0x40010400

08002c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c7c:	1d3b      	adds	r3, r7, #4
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f000 bef4 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 816a 	beq.w	8002f6e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c9a:	4bb3      	ldr	r3, [pc, #716]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f003 030c 	and.w	r3, r3, #12
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ca6:	4bb0      	ldr	r3, [pc, #704]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d159      	bne.n	8002d66 <HAL_RCC_OscConfig+0xf6>
 8002cb2:	4bad      	ldr	r3, [pc, #692]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbe:	d152      	bne.n	8002d66 <HAL_RCC_OscConfig+0xf6>
 8002cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cd4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	fab3 f383 	clz	r3, r3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d102      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x82>
 8002cec:	4b9e      	ldr	r3, [pc, #632]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	e015      	b.n	8002d1e <HAL_RCC_OscConfig+0xae>
 8002cf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cf6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfa:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d0a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d0e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d1a:	4b93      	ldr	r3, [pc, #588]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d22:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d26:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d2a:	fa92 f2a2 	rbit	r2, r2
 8002d2e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d32:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d36:	fab2 f282 	clz	r2, r2
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	f042 0220 	orr.w	r2, r2, #32
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	f002 021f 	and.w	r2, r2, #31
 8002d46:	2101      	movs	r1, #1
 8002d48:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 810c 	beq.w	8002f6c <HAL_RCC_OscConfig+0x2fc>
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 8106 	bne.w	8002f6c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f000 be86 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d70:	d106      	bne.n	8002d80 <HAL_RCC_OscConfig+0x110>
 8002d72:	4b7d      	ldr	r3, [pc, #500]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7c      	ldr	r2, [pc, #496]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e030      	b.n	8002de2 <HAL_RCC_OscConfig+0x172>
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x134>
 8002d8a:	4b77      	ldr	r3, [pc, #476]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a76      	ldr	r2, [pc, #472]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b74      	ldr	r3, [pc, #464]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a73      	ldr	r2, [pc, #460]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e01e      	b.n	8002de2 <HAL_RCC_OscConfig+0x172>
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dae:	d10c      	bne.n	8002dca <HAL_RCC_OscConfig+0x15a>
 8002db0:	4b6d      	ldr	r3, [pc, #436]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a6c      	ldr	r2, [pc, #432]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b6a      	ldr	r3, [pc, #424]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a69      	ldr	r2, [pc, #420]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	e00b      	b.n	8002de2 <HAL_RCC_OscConfig+0x172>
 8002dca:	4b67      	ldr	r3, [pc, #412]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a66      	ldr	r2, [pc, #408]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b64      	ldr	r3, [pc, #400]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a63      	ldr	r2, [pc, #396]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002de2:	4b61      	ldr	r3, [pc, #388]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	f023 020f 	bic.w	r2, r3, #15
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	495d      	ldr	r1, [pc, #372]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d059      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7fd fef8 	bl	8000bf4 <HAL_GetTick>
 8002e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e0a:	f7fd fef3 	bl	8000bf4 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b64      	cmp	r3, #100	; 0x64
 8002e18:	d902      	bls.n	8002e20 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	f000 be29 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>
 8002e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e24:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e2c:	fa93 f3a3 	rbit	r3, r3
 8002e30:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e34:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d102      	bne.n	8002e52 <HAL_RCC_OscConfig+0x1e2>
 8002e4c:	4b46      	ldr	r3, [pc, #280]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	e015      	b.n	8002e7e <HAL_RCC_OscConfig+0x20e>
 8002e52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e56:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e6a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e6e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e7a:	4b3b      	ldr	r3, [pc, #236]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e82:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e86:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e8a:	fa92 f2a2 	rbit	r2, r2
 8002e8e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e92:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e96:	fab2 f282 	clz	r2, r2
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	f042 0220 	orr.w	r2, r2, #32
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	f002 021f 	and.w	r2, r2, #31
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ab      	beq.n	8002e0a <HAL_RCC_OscConfig+0x19a>
 8002eb2:	e05c      	b.n	8002f6e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fd fe9e 	bl	8000bf4 <HAL_GetTick>
 8002eb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ebc:	e00a      	b.n	8002ed4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ebe:	f7fd fe99 	bl	8000bf4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d902      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	f000 bdcf 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>
 8002ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ed8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002ee8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d102      	bne.n	8002f06 <HAL_RCC_OscConfig+0x296>
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	e015      	b.n	8002f32 <HAL_RCC_OscConfig+0x2c2>
 8002f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f0a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f1e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f22:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_RCC_OscConfig+0x2f8>)
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f36:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f3a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f3e:	fa92 f2a2 	rbit	r2, r2
 8002f42:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f46:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f4a:	fab2 f282 	clz	r2, r2
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	f042 0220 	orr.w	r2, r2, #32
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	f002 021f 	and.w	r2, r2, #31
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ab      	bne.n	8002ebe <HAL_RCC_OscConfig+0x24e>
 8002f66:	e002      	b.n	8002f6e <HAL_RCC_OscConfig+0x2fe>
 8002f68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6e:	1d3b      	adds	r3, r7, #4
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 816f 	beq.w	800325c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f7e:	4bd0      	ldr	r3, [pc, #832]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f8a:	4bcd      	ldr	r3, [pc, #820]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	d16c      	bne.n	8003070 <HAL_RCC_OscConfig+0x400>
 8002f96:	4bca      	ldr	r3, [pc, #808]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d166      	bne.n	8003070 <HAL_RCC_OscConfig+0x400>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002fb4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb8:	fab3 f383 	clz	r3, r3
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d102      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x362>
 8002fcc:	4bbc      	ldr	r3, [pc, #752]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	e013      	b.n	8002ffa <HAL_RCC_OscConfig+0x38a>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002fea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ff6:	4bb2      	ldr	r3, [pc, #712]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003000:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003004:	fa92 f2a2 	rbit	r2, r2
 8003008:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800300c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003010:	fab2 f282 	clz	r2, r2
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f042 0220 	orr.w	r2, r2, #32
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f002 021f 	and.w	r2, r2, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_RCC_OscConfig+0x3cc>
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d002      	beq.n	800303c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f000 bd1b 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303c:	4ba0      	ldr	r3, [pc, #640]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	21f8      	movs	r1, #248	; 0xf8
 800304c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003054:	fa91 f1a1 	rbit	r1, r1
 8003058:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800305c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003060:	fab1 f181 	clz	r1, r1
 8003064:	b2c9      	uxtb	r1, r1
 8003066:	408b      	lsls	r3, r1
 8003068:	4995      	ldr	r1, [pc, #596]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	e0f5      	b.n	800325c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8085 	beq.w	8003186 <HAL_RCC_OscConfig+0x516>
 800307c:	2301      	movs	r3, #1
 800307e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003086:	fa93 f3a3 	rbit	r3, r3
 800308a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800308e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800309c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	461a      	mov	r2, r3
 80030a4:	2301      	movs	r3, #1
 80030a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fd fda4 	bl	8000bf4 <HAL_GetTick>
 80030ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b2:	f7fd fd9f 	bl	8000bf4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d902      	bls.n	80030c8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	f000 bcd5 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>
 80030c8:	2302      	movs	r3, #2
 80030ca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80030d2:	fa93 f3a3 	rbit	r3, r3
 80030d6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80030da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030de:	fab3 f383 	clz	r3, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d102      	bne.n	80030f8 <HAL_RCC_OscConfig+0x488>
 80030f2:	4b73      	ldr	r3, [pc, #460]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	e013      	b.n	8003120 <HAL_RCC_OscConfig+0x4b0>
 80030f8:	2302      	movs	r3, #2
 80030fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800310a:	2302      	movs	r3, #2
 800310c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003110:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003114:	fa93 f3a3 	rbit	r3, r3
 8003118:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800311c:	4b68      	ldr	r3, [pc, #416]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	2202      	movs	r2, #2
 8003122:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003126:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800312a:	fa92 f2a2 	rbit	r2, r2
 800312e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003132:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003136:	fab2 f282 	clz	r2, r2
 800313a:	b2d2      	uxtb	r2, r2
 800313c:	f042 0220 	orr.w	r2, r2, #32
 8003140:	b2d2      	uxtb	r2, r2
 8003142:	f002 021f 	and.w	r2, r2, #31
 8003146:	2101      	movs	r1, #1
 8003148:	fa01 f202 	lsl.w	r2, r1, r2
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0af      	beq.n	80030b2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003152:	4b5b      	ldr	r3, [pc, #364]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800315a:	1d3b      	adds	r3, r7, #4
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	21f8      	movs	r1, #248	; 0xf8
 8003162:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800316a:	fa91 f1a1 	rbit	r1, r1
 800316e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003172:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003176:	fab1 f181 	clz	r1, r1
 800317a:	b2c9      	uxtb	r1, r1
 800317c:	408b      	lsls	r3, r1
 800317e:	4950      	ldr	r1, [pc, #320]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]
 8003184:	e06a      	b.n	800325c <HAL_RCC_OscConfig+0x5ec>
 8003186:	2301      	movs	r3, #1
 8003188:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003198:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	461a      	mov	r2, r3
 80031ae:	2300      	movs	r3, #0
 80031b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fd fd1f 	bl	8000bf4 <HAL_GetTick>
 80031b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031bc:	f7fd fd1a 	bl	8000bf4 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d902      	bls.n	80031d2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	f000 bc50 	b.w	8003a72 <HAL_RCC_OscConfig+0xe02>
 80031d2:	2302      	movs	r3, #2
 80031d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80031e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e8:	fab3 f383 	clz	r3, r3
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d102      	bne.n	8003202 <HAL_RCC_OscConfig+0x592>
 80031fc:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	e013      	b.n	800322a <HAL_RCC_OscConfig+0x5ba>
 8003202:	2302      	movs	r3, #2
 8003204:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003214:	2302      	movs	r3, #2
 8003216:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800321a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <HAL_RCC_OscConfig+0x650>)
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	2202      	movs	r2, #2
 800322c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003230:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003234:	fa92 f2a2 	rbit	r2, r2
 8003238:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800323c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003240:	fab2 f282 	clz	r2, r2
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	f042 0220 	orr.w	r2, r2, #32
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	f002 021f 	and.w	r2, r2, #31
 8003250:	2101      	movs	r1, #1
 8003252:	fa01 f202 	lsl.w	r2, r1, r2
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1af      	bne.n	80031bc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80da 	beq.w	8003420 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d069      	beq.n	800334a <HAL_RCC_OscConfig+0x6da>
 8003276:	2301      	movs	r3, #1
 8003278:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <HAL_RCC_OscConfig+0x654>)
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	461a      	mov	r2, r3
 800329c:	2301      	movs	r3, #1
 800329e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a0:	f7fd fca8 	bl	8000bf4 <HAL_GetTick>
 80032a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a8:	e00e      	b.n	80032c8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032aa:	f7fd fca3 	bl	8000bf4 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d906      	bls.n	80032c8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e3d9      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 80032be:	bf00      	nop
 80032c0:	40021000 	.word	0x40021000
 80032c4:	10908120 	.word	0x10908120
 80032c8:	2302      	movs	r3, #2
 80032ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80032da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80032de:	2202      	movs	r2, #2
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	fa93 f2a3 	rbit	r2, r3
 80032ec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80032f6:	2202      	movs	r2, #2
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	fa93 f2a3 	rbit	r2, r3
 8003304:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003308:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330a:	4ba5      	ldr	r3, [pc, #660]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 800330c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800330e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003312:	2102      	movs	r1, #2
 8003314:	6019      	str	r1, [r3, #0]
 8003316:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	fa93 f1a3 	rbit	r1, r3
 8003320:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003324:	6019      	str	r1, [r3, #0]
  return result;
 8003326:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	fab3 f383 	clz	r3, r3
 8003330:	b2db      	uxtb	r3, r3
 8003332:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2101      	movs	r1, #1
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0b0      	beq.n	80032aa <HAL_RCC_OscConfig+0x63a>
 8003348:	e06a      	b.n	8003420 <HAL_RCC_OscConfig+0x7b0>
 800334a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	fa93 f2a3 	rbit	r2, r3
 800335c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003360:	601a      	str	r2, [r3, #0]
  return result;
 8003362:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003366:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	4b8c      	ldr	r3, [pc, #560]	; (80035a4 <HAL_RCC_OscConfig+0x934>)
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	461a      	mov	r2, r3
 8003378:	2300      	movs	r3, #0
 800337a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337c:	f7fd fc3a 	bl	8000bf4 <HAL_GetTick>
 8003380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	e009      	b.n	800339a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003386:	f7fd fc35 	bl	8000bf4 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e36b      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 800339a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800339e:	2202      	movs	r2, #2
 80033a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	fa93 f2a3 	rbit	r2, r3
 80033ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80033b6:	2202      	movs	r2, #2
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	fa93 f2a3 	rbit	r2, r3
 80033c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80033ce:	2202      	movs	r2, #2
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80033e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e2:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80033e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80033ea:	2102      	movs	r1, #2
 80033ec:	6019      	str	r1, [r3, #0]
 80033ee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	fa93 f1a3 	rbit	r1, r3
 80033f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033fc:	6019      	str	r1, [r3, #0]
  return result;
 80033fe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800340e:	b2db      	uxtb	r3, r3
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1b2      	bne.n	8003386 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 8158 	beq.w	80036e0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003436:	4b5a      	ldr	r3, [pc, #360]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d112      	bne.n	8003468 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003442:	4b57      	ldr	r3, [pc, #348]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	4a56      	ldr	r2, [pc, #344]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344c:	61d3      	str	r3, [r2, #28]
 800344e:	4b54      	ldr	r3, [pc, #336]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003456:	f107 0308 	add.w	r3, r7, #8
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	f107 0308 	add.w	r3, r7, #8
 8003460:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	4b4f      	ldr	r3, [pc, #316]	; (80035a8 <HAL_RCC_OscConfig+0x938>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d11a      	bne.n	80034aa <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003474:	4b4c      	ldr	r3, [pc, #304]	; (80035a8 <HAL_RCC_OscConfig+0x938>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a4b      	ldr	r2, [pc, #300]	; (80035a8 <HAL_RCC_OscConfig+0x938>)
 800347a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800347e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003480:	f7fd fbb8 	bl	8000bf4 <HAL_GetTick>
 8003484:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	e009      	b.n	800349e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7fd fbb3 	bl	8000bf4 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e2e9      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349e:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <HAL_RCC_OscConfig+0x938>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0ef      	beq.n	800348a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034aa:	1d3b      	adds	r3, r7, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d106      	bne.n	80034c2 <HAL_RCC_OscConfig+0x852>
 80034b4:	4b3a      	ldr	r3, [pc, #232]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4a39      	ldr	r2, [pc, #228]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6213      	str	r3, [r2, #32]
 80034c0:	e02f      	b.n	8003522 <HAL_RCC_OscConfig+0x8b2>
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x876>
 80034cc:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4a33      	ldr	r2, [pc, #204]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4a30      	ldr	r2, [pc, #192]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034de:	f023 0304 	bic.w	r3, r3, #4
 80034e2:	6213      	str	r3, [r2, #32]
 80034e4:	e01d      	b.n	8003522 <HAL_RCC_OscConfig+0x8b2>
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b05      	cmp	r3, #5
 80034ee:	d10c      	bne.n	800350a <HAL_RCC_OscConfig+0x89a>
 80034f0:	4b2b      	ldr	r3, [pc, #172]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4a2a      	ldr	r2, [pc, #168]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034f6:	f043 0304 	orr.w	r3, r3, #4
 80034fa:	6213      	str	r3, [r2, #32]
 80034fc:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4a27      	ldr	r2, [pc, #156]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6213      	str	r3, [r2, #32]
 8003508:	e00b      	b.n	8003522 <HAL_RCC_OscConfig+0x8b2>
 800350a:	4b25      	ldr	r3, [pc, #148]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	4a24      	ldr	r2, [pc, #144]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003510:	f023 0301 	bic.w	r3, r3, #1
 8003514:	6213      	str	r3, [r2, #32]
 8003516:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 800351c:	f023 0304 	bic.w	r3, r3, #4
 8003520:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d06b      	beq.n	8003604 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352c:	f7fd fb62 	bl	8000bf4 <HAL_GetTick>
 8003530:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	e00b      	b.n	800354e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fd fb5d 	bl	8000bf4 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e291      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 800354e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003552:	2202      	movs	r2, #2
 8003554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	fa93 f2a3 	rbit	r2, r3
 8003560:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800356a:	2202      	movs	r2, #2
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	fa93 f2a3 	rbit	r2, r3
 8003578:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800357c:	601a      	str	r2, [r3, #0]
  return result;
 800357e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003582:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003584:	fab3 f383 	clz	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	b2db      	uxtb	r3, r3
 800358e:	f043 0302 	orr.w	r3, r3, #2
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d109      	bne.n	80035ac <HAL_RCC_OscConfig+0x93c>
 8003598:	4b01      	ldr	r3, [pc, #4]	; (80035a0 <HAL_RCC_OscConfig+0x930>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	e014      	b.n	80035c8 <HAL_RCC_OscConfig+0x958>
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
 80035a4:	10908120 	.word	0x10908120
 80035a8:	40007000 	.word	0x40007000
 80035ac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035b0:	2202      	movs	r2, #2
 80035b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	fa93 f2a3 	rbit	r2, r3
 80035be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	4bbb      	ldr	r3, [pc, #748]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80035cc:	2102      	movs	r1, #2
 80035ce:	6011      	str	r1, [r2, #0]
 80035d0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	fa92 f1a2 	rbit	r1, r2
 80035da:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80035de:	6011      	str	r1, [r2, #0]
  return result;
 80035e0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	fab2 f282 	clz	r2, r2
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	f002 021f 	and.w	r2, r2, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f202 	lsl.w	r2, r1, r2
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d099      	beq.n	8003536 <HAL_RCC_OscConfig+0x8c6>
 8003602:	e063      	b.n	80036cc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003604:	f7fd faf6 	bl	8000bf4 <HAL_GetTick>
 8003608:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800360c:	e00b      	b.n	8003626 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360e:	f7fd faf1 	bl	8000bf4 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e225      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 8003626:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800362a:	2202      	movs	r2, #2
 800362c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	fa93 f2a3 	rbit	r2, r3
 8003638:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003642:	2202      	movs	r2, #2
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	fa93 f2a3 	rbit	r2, r3
 8003650:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003654:	601a      	str	r2, [r3, #0]
  return result;
 8003656:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800365a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365c:	fab3 f383 	clz	r3, r3
 8003660:	b2db      	uxtb	r3, r3
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	b2db      	uxtb	r3, r3
 8003666:	f043 0302 	orr.w	r3, r3, #2
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d102      	bne.n	8003676 <HAL_RCC_OscConfig+0xa06>
 8003670:	4b90      	ldr	r3, [pc, #576]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	e00d      	b.n	8003692 <HAL_RCC_OscConfig+0xa22>
 8003676:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800367a:	2202      	movs	r2, #2
 800367c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	fa93 f2a3 	rbit	r2, r3
 8003688:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	4b89      	ldr	r3, [pc, #548]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003696:	2102      	movs	r1, #2
 8003698:	6011      	str	r1, [r2, #0]
 800369a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	fa92 f1a2 	rbit	r1, r2
 80036a4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80036a8:	6011      	str	r1, [r2, #0]
  return result;
 80036aa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	fab2 f282 	clz	r2, r2
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	f002 021f 	and.w	r2, r2, #31
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f202 	lsl.w	r2, r1, r2
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1a0      	bne.n	800360e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036cc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d105      	bne.n	80036e0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d4:	4b77      	ldr	r3, [pc, #476]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	4a76      	ldr	r2, [pc, #472]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 80036da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036de:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e0:	1d3b      	adds	r3, r7, #4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 81c2 	beq.w	8003a70 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ec:	4b71      	ldr	r3, [pc, #452]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	f000 819c 	beq.w	8003a32 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036fa:	1d3b      	adds	r3, r7, #4
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	2b02      	cmp	r3, #2
 8003702:	f040 8114 	bne.w	800392e <HAL_RCC_OscConfig+0xcbe>
 8003706:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800370a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800370e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	fa93 f2a3 	rbit	r2, r3
 800371a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800371e:	601a      	str	r2, [r3, #0]
  return result;
 8003720:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003724:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003730:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	461a      	mov	r2, r3
 8003738:	2300      	movs	r3, #0
 800373a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fd fa5a 	bl	8000bf4 <HAL_GetTick>
 8003740:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003744:	e009      	b.n	800375a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003746:	f7fd fa55 	bl	8000bf4 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e18b      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 800375a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800375e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003762:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003764:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	fa93 f2a3 	rbit	r2, r3
 800376e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003772:	601a      	str	r2, [r3, #0]
  return result;
 8003774:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003778:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f043 0301 	orr.w	r3, r3, #1
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b01      	cmp	r3, #1
 800378c:	d102      	bne.n	8003794 <HAL_RCC_OscConfig+0xb24>
 800378e:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	e01b      	b.n	80037cc <HAL_RCC_OscConfig+0xb5c>
 8003794:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003798:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800379c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	fa93 f2a3 	rbit	r2, r3
 80037a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	fa93 f2a3 	rbit	r2, r3
 80037c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	4b3a      	ldr	r3, [pc, #232]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80037d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037d4:	6011      	str	r1, [r2, #0]
 80037d6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	fa92 f1a2 	rbit	r1, r2
 80037e0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80037e4:	6011      	str	r1, [r2, #0]
  return result;
 80037e6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	fab2 f282 	clz	r2, r2
 80037f0:	b2d2      	uxtb	r2, r2
 80037f2:	f042 0220 	orr.w	r2, r2, #32
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	f002 021f 	and.w	r2, r2, #31
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003802:	4013      	ands	r3, r2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d19e      	bne.n	8003746 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003808:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003810:	1d3b      	adds	r3, r7, #4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	430b      	orrs	r3, r1
 800381e:	4925      	ldr	r1, [pc, #148]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
 8003824:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003828:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800382c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	fa93 f2a3 	rbit	r2, r3
 8003838:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800383c:	601a      	str	r2, [r3, #0]
  return result;
 800383e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003842:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800384e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	461a      	mov	r2, r3
 8003856:	2301      	movs	r3, #1
 8003858:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fd f9cb 	bl	8000bf4 <HAL_GetTick>
 800385e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003862:	e009      	b.n	8003878 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003864:	f7fd f9c6 	bl	8000bf4 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e0fc      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 8003878:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800387c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	fa93 f2a3 	rbit	r2, r3
 800388c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003890:	601a      	str	r2, [r3, #0]
  return result;
 8003892:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003896:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003898:	fab3 f383 	clz	r3, r3
 800389c:	b2db      	uxtb	r3, r3
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d105      	bne.n	80038b8 <HAL_RCC_OscConfig+0xc48>
 80038ac:	4b01      	ldr	r3, [pc, #4]	; (80038b4 <HAL_RCC_OscConfig+0xc44>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	e01e      	b.n	80038f0 <HAL_RCC_OscConfig+0xc80>
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000
 80038b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fa93 f2a3 	rbit	r2, r3
 80038cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	fa93 f2a3 	rbit	r2, r3
 80038e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	4b63      	ldr	r3, [pc, #396]	; (8003a7c <HAL_RCC_OscConfig+0xe0c>)
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038f8:	6011      	str	r1, [r2, #0]
 80038fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	fa92 f1a2 	rbit	r1, r2
 8003904:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003908:	6011      	str	r1, [r2, #0]
  return result;
 800390a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	fab2 f282 	clz	r2, r2
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	f042 0220 	orr.w	r2, r2, #32
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	f002 021f 	and.w	r2, r2, #31
 8003920:	2101      	movs	r1, #1
 8003922:	fa01 f202 	lsl.w	r2, r1, r2
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d09b      	beq.n	8003864 <HAL_RCC_OscConfig+0xbf4>
 800392c:	e0a0      	b.n	8003a70 <HAL_RCC_OscConfig+0xe00>
 800392e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003932:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003936:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003938:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	fa93 f2a3 	rbit	r2, r3
 8003942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003946:	601a      	str	r2, [r3, #0]
  return result;
 8003948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800394c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003958:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	461a      	mov	r2, r3
 8003960:	2300      	movs	r3, #0
 8003962:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fd f946 	bl	8000bf4 <HAL_GetTick>
 8003968:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396c:	e009      	b.n	8003982 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396e:	f7fd f941 	bl	8000bf4 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e077      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
 8003982:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800398a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	fa93 f2a3 	rbit	r2, r3
 8003996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800399a:	601a      	str	r2, [r3, #0]
  return result;
 800399c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <HAL_RCC_OscConfig+0xd4c>
 80039b6:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <HAL_RCC_OscConfig+0xe0c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	e01b      	b.n	80039f4 <HAL_RCC_OscConfig+0xd84>
 80039bc:	f107 0320 	add.w	r3, r7, #32
 80039c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	f107 0320 	add.w	r3, r7, #32
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	fa93 f2a3 	rbit	r2, r3
 80039d0:	f107 031c 	add.w	r3, r7, #28
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	f107 0318 	add.w	r3, r7, #24
 80039da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	f107 0318 	add.w	r3, r7, #24
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	fa93 f2a3 	rbit	r2, r3
 80039ea:	f107 0314 	add.w	r3, r7, #20
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <HAL_RCC_OscConfig+0xe0c>)
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	f107 0210 	add.w	r2, r7, #16
 80039f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039fc:	6011      	str	r1, [r2, #0]
 80039fe:	f107 0210 	add.w	r2, r7, #16
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	fa92 f1a2 	rbit	r1, r2
 8003a08:	f107 020c 	add.w	r2, r7, #12
 8003a0c:	6011      	str	r1, [r2, #0]
  return result;
 8003a0e:	f107 020c 	add.w	r2, r7, #12
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	fab2 f282 	clz	r2, r2
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	f042 0220 	orr.w	r2, r2, #32
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	f002 021f 	and.w	r2, r2, #31
 8003a24:	2101      	movs	r1, #1
 8003a26:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d19e      	bne.n	800396e <HAL_RCC_OscConfig+0xcfe>
 8003a30:	e01e      	b.n	8003a70 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a32:	1d3b      	adds	r3, r7, #4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e018      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <HAL_RCC_OscConfig+0xe0c>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a48:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d108      	bne.n	8003a6c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a62:	1d3b      	adds	r3, r7, #4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000

08003a80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b09e      	sub	sp, #120	; 0x78
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e162      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a98:	4b90      	ldr	r3, [pc, #576]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d910      	bls.n	8003ac8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b8d      	ldr	r3, [pc, #564]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0207 	bic.w	r2, r3, #7
 8003aae:	498b      	ldr	r1, [pc, #556]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab6:	4b89      	ldr	r3, [pc, #548]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0307 	and.w	r3, r3, #7
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e14a      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad4:	4b82      	ldr	r3, [pc, #520]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	497f      	ldr	r1, [pc, #508]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80dc 	beq.w	8003cac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d13c      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xf6>
 8003afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b00:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b04:	fa93 f3a3 	rbit	r3, r3
 8003b08:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d102      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xa6>
 8003b20:	4b6f      	ldr	r3, [pc, #444]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	e00f      	b.n	8003b46 <HAL_RCC_ClockConfig+0xc6>
 8003b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b2a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b2e:	fa93 f3a3 	rbit	r3, r3
 8003b32:	667b      	str	r3, [r7, #100]	; 0x64
 8003b34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b38:	663b      	str	r3, [r7, #96]	; 0x60
 8003b3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b3c:	fa93 f3a3 	rbit	r3, r3
 8003b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b42:	4b67      	ldr	r3, [pc, #412]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b4e:	fa92 f2a2 	rbit	r2, r2
 8003b52:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b56:	fab2 f282 	clz	r2, r2
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f042 0220 	orr.w	r2, r2, #32
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f002 021f 	and.w	r2, r2, #31
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d17b      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e0f3      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d13c      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x178>
 8003b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8e:	fab3 f383 	clz	r3, r3
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f043 0301 	orr.w	r3, r3, #1
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d102      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x128>
 8003ba2:	4b4f      	ldr	r3, [pc, #316]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	e00f      	b.n	8003bc8 <HAL_RCC_ClockConfig+0x148>
 8003ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bba:	643b      	str	r3, [r7, #64]	; 0x40
 8003bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bc4:	4b46      	ldr	r3, [pc, #280]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bcc:	63ba      	str	r2, [r7, #56]	; 0x38
 8003bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd0:	fa92 f2a2 	rbit	r2, r2
 8003bd4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd8:	fab2 f282 	clz	r2, r2
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	f042 0220 	orr.w	r2, r2, #32
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	f002 021f 	and.w	r2, r2, #31
 8003be8:	2101      	movs	r1, #1
 8003bea:	fa01 f202 	lsl.w	r2, r1, r2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d13a      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e0b2      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfe:	fa93 f3a3 	rbit	r3, r3
 8003c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d102      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x1a0>
 8003c1a:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	e00d      	b.n	8003c3c <HAL_RCC_ClockConfig+0x1bc>
 8003c20:	2302      	movs	r3, #2
 8003c22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	fa93 f3a3 	rbit	r3, r3
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	623b      	str	r3, [r7, #32]
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	fa93 f3a3 	rbit	r3, r3
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	61ba      	str	r2, [r7, #24]
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	fa92 f2a2 	rbit	r2, r2
 8003c46:	617a      	str	r2, [r7, #20]
  return result;
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	fab2 f282 	clz	r2, r2
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	f042 0220 	orr.w	r2, r2, #32
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	f002 021f 	and.w	r2, r2, #31
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e079      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f023 0203 	bic.w	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	491a      	ldr	r1, [pc, #104]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c7c:	f7fc ffba 	bl	8000bf4 <HAL_GetTick>
 8003c80:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	e00a      	b.n	8003c9a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c84:	f7fc ffb6 	bl	8000bf4 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e061      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_RCC_ClockConfig+0x260>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 020c 	and.w	r2, r3, #12
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d1eb      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d214      	bcs.n	8003ce4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 0207 	bic.w	r2, r3, #7
 8003cc2:	4906      	ldr	r1, [pc, #24]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <HAL_RCC_ClockConfig+0x25c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e040      	b.n	8003d5e <HAL_RCC_ClockConfig+0x2de>
 8003cdc:	40022000 	.word	0x40022000
 8003ce0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	491a      	ldr	r1, [pc, #104]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d0e:	4b16      	ldr	r3, [pc, #88]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4912      	ldr	r1, [pc, #72]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d22:	f000 f829 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8003d26:	4601      	mov	r1, r0
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <HAL_RCC_ClockConfig+0x2e8>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d30:	22f0      	movs	r2, #240	; 0xf0
 8003d32:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	fa92 f2a2 	rbit	r2, r2
 8003d3a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	fab2 f282 	clz	r2, r2
 8003d42:	b2d2      	uxtb	r2, r2
 8003d44:	40d3      	lsrs	r3, r2
 8003d46:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <HAL_RCC_ClockConfig+0x2ec>)
 8003d48:	5cd3      	ldrb	r3, [r2, r3]
 8003d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <HAL_RCC_ClockConfig+0x2f0>)
 8003d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <HAL_RCC_ClockConfig+0x2f4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fc ff08 	bl	8000b6c <HAL_InitTick>
  
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3778      	adds	r7, #120	; 0x78
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	080055dc 	.word	0x080055dc
 8003d70:	200004b4 	.word	0x200004b4
 8003d74:	200004b8 	.word	0x200004b8

08003d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b08b      	sub	sp, #44	; 0x2c
 8003d7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d92:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d002      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x30>
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d003      	beq.n	8003dae <HAL_RCC_GetSysClockFreq+0x36>
 8003da6:	e03c      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003da8:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003daa:	623b      	str	r3, [r7, #32]
      break;
 8003dac:	e03c      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003db4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003db8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	fa92 f2a2 	rbit	r2, r2
 8003dc0:	607a      	str	r2, [r7, #4]
  return result;
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	fab2 f282 	clz	r2, r2
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	40d3      	lsrs	r3, r2
 8003dcc:	4a1c      	ldr	r2, [pc, #112]	; (8003e40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003dd2:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	220f      	movs	r2, #15
 8003ddc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	fa92 f2a2 	rbit	r2, r2
 8003de4:	60fa      	str	r2, [r7, #12]
  return result;
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	fab2 f282 	clz	r2, r2
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	40d3      	lsrs	r3, r2
 8003df0:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003df2:	5cd3      	ldrb	r3, [r2, r3]
 8003df4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e00:	4a0e      	ldr	r2, [pc, #56]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e10:	e004      	b.n	8003e1c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	4a0c      	ldr	r2, [pc, #48]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	623b      	str	r3, [r7, #32]
      break;
 8003e20:	e002      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e24:	623b      	str	r3, [r7, #32]
      break;
 8003e26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e28:	6a3b      	ldr	r3, [r7, #32]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	372c      	adds	r7, #44	; 0x2c
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	007a1200 	.word	0x007a1200
 8003e40:	080055f4 	.word	0x080055f4
 8003e44:	08005604 	.word	0x08005604
 8003e48:	003d0900 	.word	0x003d0900

08003e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	200004b4 	.word	0x200004b4

08003e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003e6a:	f7ff ffef 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003e6e:	4601      	mov	r1, r0
 8003e70:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e78:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003e7c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	fa92 f2a2 	rbit	r2, r2
 8003e84:	603a      	str	r2, [r7, #0]
  return result;
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	fab2 f282 	clz	r2, r2
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	40d3      	lsrs	r3, r2
 8003e90:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	080055ec 	.word	0x080055ec

08003ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003eae:	f7ff ffcd 	bl	8003e4c <HAL_RCC_GetHCLKFreq>
 8003eb2:	4601      	mov	r1, r0
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ebc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003ec0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	fa92 f2a2 	rbit	r2, r2
 8003ec8:	603a      	str	r2, [r7, #0]
  return result;
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	fab2 f282 	clz	r2, r2
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	40d3      	lsrs	r3, r2
 8003ed4:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003ed6:	5cd3      	ldrb	r3, [r2, r3]
 8003ed8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	080055ec 	.word	0x080055ec

08003eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e049      	b.n	8003f92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fc fca6 	bl	8000864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f000 faa2 	bl	8004474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d001      	beq.n	8003fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e040      	b.n	8004036 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a1c      	ldr	r2, [pc, #112]	; (8004044 <HAL_TIM_Base_Start_IT+0xa8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x58>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fde:	d009      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x58>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <HAL_TIM_Base_Start_IT+0xac>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x58>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a17      	ldr	r2, [pc, #92]	; (800404c <HAL_TIM_Base_Start_IT+0xb0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d115      	bne.n	8004020 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_TIM_Base_Start_IT+0xb4>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b06      	cmp	r3, #6
 8004004:	d015      	beq.n	8004032 <HAL_TIM_Base_Start_IT+0x96>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400c:	d011      	beq.n	8004032 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800401e:	e008      	b.n	8004032 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e000      	b.n	8004034 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004032:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	40012c00 	.word	0x40012c00
 8004048:	40000400 	.word	0x40000400
 800404c:	40014000 	.word	0x40014000
 8004050:	00010007 	.word	0x00010007

08004054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b02      	cmp	r3, #2
 8004068:	d122      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b02      	cmp	r3, #2
 8004076:	d11b      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0202 	mvn.w	r2, #2
 8004080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f9ce 	bl	8004438 <HAL_TIM_IC_CaptureCallback>
 800409c:	e005      	b.n	80040aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f9c0 	bl	8004424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f9d1 	bl	800444c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d122      	bne.n	8004104 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d11b      	bne.n	8004104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0204 	mvn.w	r2, #4
 80040d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f9a4 	bl	8004438 <HAL_TIM_IC_CaptureCallback>
 80040f0:	e005      	b.n	80040fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f996 	bl	8004424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f9a7 	bl	800444c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b08      	cmp	r3, #8
 8004110:	d122      	bne.n	8004158 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b08      	cmp	r3, #8
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0208 	mvn.w	r2, #8
 8004128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2204      	movs	r2, #4
 800412e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f97a 	bl	8004438 <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f96c 	bl	8004424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f97d 	bl	800444c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	2b10      	cmp	r3, #16
 8004164:	d122      	bne.n	80041ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b10      	cmp	r3, #16
 8004172:	d11b      	bne.n	80041ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0210 	mvn.w	r2, #16
 800417c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2208      	movs	r2, #8
 8004182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f950 	bl	8004438 <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f942 	bl	8004424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f953 	bl	800444c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d10e      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d107      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0201 	mvn.w	r2, #1
 80041d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fb fff8 	bl	80001c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e2:	2b80      	cmp	r3, #128	; 0x80
 80041e4:	d10e      	bne.n	8004204 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f0:	2b80      	cmp	r3, #128	; 0x80
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fac2 	bl	8004788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004212:	d10e      	bne.n	8004232 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421e:	2b80      	cmp	r3, #128	; 0x80
 8004220:	d107      	bne.n	8004232 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800422a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fab5 	bl	800479c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423c:	2b40      	cmp	r3, #64	; 0x40
 800423e:	d10e      	bne.n	800425e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	d107      	bne.n	800425e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f901 	bl	8004460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b20      	cmp	r3, #32
 800426a:	d10e      	bne.n	800428a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b20      	cmp	r3, #32
 8004278:	d107      	bne.n	800428a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f06f 0220 	mvn.w	r2, #32
 8004282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fa75 	bl	8004774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_TIM_ConfigClockSource+0x1c>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e0b6      	b.n	800441c <HAL_TIM_ConfigClockSource+0x18a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2202      	movs	r2, #2
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042cc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ea:	d03e      	beq.n	800436a <HAL_TIM_ConfigClockSource+0xd8>
 80042ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f0:	f200 8087 	bhi.w	8004402 <HAL_TIM_ConfigClockSource+0x170>
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	f000 8086 	beq.w	8004408 <HAL_TIM_ConfigClockSource+0x176>
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004300:	d87f      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 8004302:	2b70      	cmp	r3, #112	; 0x70
 8004304:	d01a      	beq.n	800433c <HAL_TIM_ConfigClockSource+0xaa>
 8004306:	2b70      	cmp	r3, #112	; 0x70
 8004308:	d87b      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 800430a:	2b60      	cmp	r3, #96	; 0x60
 800430c:	d050      	beq.n	80043b0 <HAL_TIM_ConfigClockSource+0x11e>
 800430e:	2b60      	cmp	r3, #96	; 0x60
 8004310:	d877      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 8004312:	2b50      	cmp	r3, #80	; 0x50
 8004314:	d03c      	beq.n	8004390 <HAL_TIM_ConfigClockSource+0xfe>
 8004316:	2b50      	cmp	r3, #80	; 0x50
 8004318:	d873      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 800431a:	2b40      	cmp	r3, #64	; 0x40
 800431c:	d058      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0x13e>
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d86f      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 8004322:	2b30      	cmp	r3, #48	; 0x30
 8004324:	d064      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x15e>
 8004326:	2b30      	cmp	r3, #48	; 0x30
 8004328:	d86b      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 800432a:	2b20      	cmp	r3, #32
 800432c:	d060      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x15e>
 800432e:	2b20      	cmp	r3, #32
 8004330:	d867      	bhi.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d05c      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x15e>
 8004336:	2b10      	cmp	r3, #16
 8004338:	d05a      	beq.n	80043f0 <HAL_TIM_ConfigClockSource+0x15e>
 800433a:	e062      	b.n	8004402 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6899      	ldr	r1, [r3, #8]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f000 f984 	bl	8004658 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800435e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	609a      	str	r2, [r3, #8]
      break;
 8004368:	e04f      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6899      	ldr	r1, [r3, #8]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f000 f96d 	bl	8004658 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800438c:	609a      	str	r2, [r3, #8]
      break;
 800438e:	e03c      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	461a      	mov	r2, r3
 800439e:	f000 f8e1 	bl	8004564 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2150      	movs	r1, #80	; 0x50
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f93a 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 80043ae:	e02c      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6818      	ldr	r0, [r3, #0]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	461a      	mov	r2, r3
 80043be:	f000 f900 	bl	80045c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2160      	movs	r1, #96	; 0x60
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 f92a 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 80043ce:	e01c      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	461a      	mov	r2, r3
 80043de:	f000 f8c1 	bl	8004564 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2140      	movs	r1, #64	; 0x40
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f91a 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 80043ee:	e00c      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4619      	mov	r1, r3
 80043fa:	4610      	mov	r0, r2
 80043fc:	f000 f911 	bl	8004622 <TIM_ITRx_SetConfig>
      break;
 8004400:	e003      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
      break;
 8004406:	e000      	b.n	800440a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004408:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a32      	ldr	r2, [pc, #200]	; (8004550 <TIM_Base_SetConfig+0xdc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d007      	beq.n	800449c <TIM_Base_SetConfig+0x28>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004492:	d003      	beq.n	800449c <TIM_Base_SetConfig+0x28>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a2f      	ldr	r2, [pc, #188]	; (8004554 <TIM_Base_SetConfig+0xe0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d108      	bne.n	80044ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a27      	ldr	r2, [pc, #156]	; (8004550 <TIM_Base_SetConfig+0xdc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <TIM_Base_SetConfig+0x6a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044bc:	d00f      	beq.n	80044de <TIM_Base_SetConfig+0x6a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a24      	ldr	r2, [pc, #144]	; (8004554 <TIM_Base_SetConfig+0xe0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_Base_SetConfig+0x6a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a23      	ldr	r2, [pc, #140]	; (8004558 <TIM_Base_SetConfig+0xe4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <TIM_Base_SetConfig+0x6a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a22      	ldr	r2, [pc, #136]	; (800455c <TIM_Base_SetConfig+0xe8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_Base_SetConfig+0x6a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a21      	ldr	r2, [pc, #132]	; (8004560 <TIM_Base_SetConfig+0xec>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a0e      	ldr	r2, [pc, #56]	; (8004550 <TIM_Base_SetConfig+0xdc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00b      	beq.n	8004534 <TIM_Base_SetConfig+0xc0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a0e      	ldr	r2, [pc, #56]	; (8004558 <TIM_Base_SetConfig+0xe4>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d007      	beq.n	8004534 <TIM_Base_SetConfig+0xc0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a0d      	ldr	r2, [pc, #52]	; (800455c <TIM_Base_SetConfig+0xe8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_Base_SetConfig+0xc0>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a0c      	ldr	r2, [pc, #48]	; (8004560 <TIM_Base_SetConfig+0xec>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d103      	bne.n	800453c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	615a      	str	r2, [r3, #20]
}
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40012c00 	.word	0x40012c00
 8004554:	40000400 	.word	0x40000400
 8004558:	40014000 	.word	0x40014000
 800455c:	40014400 	.word	0x40014400
 8004560:	40014800 	.word	0x40014800

08004564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f023 0201 	bic.w	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800458e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f023 030a 	bic.w	r3, r3, #10
 80045a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	621a      	str	r2, [r3, #32]
}
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b087      	sub	sp, #28
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	f023 0210 	bic.w	r2, r3, #16
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	031b      	lsls	r3, r3, #12
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004638:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	f043 0307 	orr.w	r3, r3, #7
 8004644:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	609a      	str	r2, [r3, #8]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004672:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	021a      	lsls	r2, r3, #8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	431a      	orrs	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4313      	orrs	r3, r2
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	609a      	str	r2, [r3, #8]
}
 800468c:	bf00      	nop
 800468e:	371c      	adds	r7, #28
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e054      	b.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a24      	ldr	r2, [pc, #144]	; (8004768 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d108      	bne.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4313      	orrs	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a17      	ldr	r2, [pc, #92]	; (8004768 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00e      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004718:	d009      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a13      	ldr	r2, [pc, #76]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d004      	beq.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a11      	ldr	r2, [pc, #68]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d10c      	bne.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	4313      	orrs	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40000400 	.word	0x40000400
 8004770:	40014000 	.word	0x40014000

08004774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e040      	b.n	8004844 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7fc f86a 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2224      	movs	r2, #36	; 0x24
 80047dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fb2a 	bl	8004e48 <UART_SetConfig>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e022      	b.n	8004844 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fc54 	bl	80050b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800481a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800482a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fcdb 	bl	80051f8 <UART_CheckIdleState>
 8004842:	4603      	mov	r3, r0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b0ba      	sub	sp, #232	; 0xe8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004872:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004876:	f640 030f 	movw	r3, #2063	; 0x80f
 800487a:	4013      	ands	r3, r2
 800487c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004880:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d115      	bne.n	80048b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00f      	beq.n	80048b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004898:	f003 0320 	and.w	r3, r3, #32
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 82a3 	beq.w	8004df0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	4798      	blx	r3
      }
      return;
 80048b2:	e29d      	b.n	8004df0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8117 	beq.w	8004aec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80048ce:	4b85      	ldr	r3, [pc, #532]	; (8004ae4 <HAL_UART_IRQHandler+0x298>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 810a 	beq.w	8004aec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d011      	beq.n	8004908 <HAL_UART_IRQHandler+0xbc>
 80048e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00b      	beq.n	8004908 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2201      	movs	r2, #1
 80048f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048fe:	f043 0201 	orr.w	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d011      	beq.n	8004938 <HAL_UART_IRQHandler+0xec>
 8004914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00b      	beq.n	8004938 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2202      	movs	r2, #2
 8004926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800492e:	f043 0204 	orr.w	r2, r3, #4
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d011      	beq.n	8004968 <HAL_UART_IRQHandler+0x11c>
 8004944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2204      	movs	r2, #4
 8004956:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495e:	f043 0202 	orr.w	r2, r3, #2
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d017      	beq.n	80049a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d105      	bne.n	800498c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004984:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00b      	beq.n	80049a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2208      	movs	r2, #8
 8004992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800499a:	f043 0208 	orr.w	r2, r3, #8
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d012      	beq.n	80049d6 <HAL_UART_IRQHandler+0x18a>
 80049b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00c      	beq.n	80049d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049cc:	f043 0220 	orr.w	r2, r3, #32
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8209 	beq.w	8004df4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	d005      	beq.n	8004a2e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a26:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d04f      	beq.n	8004ace <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 fcef 	bl	8005412 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d141      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3308      	adds	r3, #8
 8004a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a6e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a7e:	e841 2300 	strex	r3, r2, [r1]
 8004a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1d9      	bne.n	8004a42 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d013      	beq.n	8004abe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9a:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <HAL_UART_IRQHandler+0x29c>)
 8004a9c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fd fd9c 	bl	80025e0 <HAL_DMA_Abort_IT>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d017      	beq.n	8004ade <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	e00f      	b.n	8004ade <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f9ac 	bl	8004e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac4:	e00b      	b.n	8004ade <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f9a8 	bl	8004e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	e007      	b.n	8004ade <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f9a4 	bl	8004e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004adc:	e18a      	b.n	8004df4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ade:	bf00      	nop
    return;
 8004ae0:	e188      	b.n	8004df4 <HAL_UART_IRQHandler+0x5a8>
 8004ae2:	bf00      	nop
 8004ae4:	04000120 	.word	0x04000120
 8004ae8:	080054d9 	.word	0x080054d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	f040 8143 	bne.w	8004d7c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 813c 	beq.w	8004d7c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8135 	beq.w	8004d7c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2210      	movs	r2, #16
 8004b18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b24:	2b40      	cmp	r3, #64	; 0x40
 8004b26:	f040 80b1 	bne.w	8004c8c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 815c 	beq.w	8004df8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	f080 8154 	bcs.w	8004df8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	f000 8085 	beq.w	8004c70 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b94:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ba0:	e841 2300 	strex	r3, r2, [r1]
 8004ba4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1da      	bne.n	8004b66 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3308      	adds	r3, #8
 8004bd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bd4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bd8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004be0:	e841 2300 	strex	r3, r2, [r1]
 8004be4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004be6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1e1      	bne.n	8004bb0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3308      	adds	r3, #8
 8004c0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c10:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c18:	e841 2300 	strex	r3, r2, [r1]
 8004c1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e3      	bne.n	8004bec <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c40:	f023 0310 	bic.w	r3, r3, #16
 8004c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c52:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e4      	bne.n	8004c30 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fd fc7f 	bl	800256e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	4619      	mov	r1, r3
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f8d3 	bl	8004e30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c8a:	e0b5      	b.n	8004df8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80a7 	beq.w	8004dfc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004cae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 80a2 	beq.w	8004dfc <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cda:	647b      	str	r3, [r7, #68]	; 0x44
 8004cdc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ce0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e4      	bne.n	8004cb8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d12:	633a      	str	r2, [r7, #48]	; 0x30
 8004d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e3      	bne.n	8004cee <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f023 0310 	bic.w	r3, r3, #16
 8004d4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	69b9      	ldr	r1, [r7, #24]
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	617b      	str	r3, [r7, #20]
   return(result);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e4      	bne.n	8004d38 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f85b 	bl	8004e30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d7a:	e03f      	b.n	8004dfc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00e      	beq.n	8004da6 <HAL_UART_IRQHandler+0x55a>
 8004d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fbda 	bl	8005558 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004da4:	e02d      	b.n	8004e02 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00e      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01c      	beq.n	8004e00 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	4798      	blx	r3
    }
    return;
 8004dce:	e017      	b.n	8004e00 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d012      	beq.n	8004e02 <HAL_UART_IRQHandler+0x5b6>
 8004ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00c      	beq.n	8004e02 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fb8b 	bl	8005504 <UART_EndTransmit_IT>
    return;
 8004dee:	e008      	b.n	8004e02 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004df0:	bf00      	nop
 8004df2:	e006      	b.n	8004e02 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004df4:	bf00      	nop
 8004df6:	e004      	b.n	8004e02 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004df8:	bf00      	nop
 8004dfa:	e002      	b.n	8004e02 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004dfc:	bf00      	nop
 8004dfe:	e000      	b.n	8004e02 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004e00:	bf00      	nop
  }

}
 8004e02:	37e8      	adds	r7, #232	; 0xe8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b088      	sub	sp, #32
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	431a      	orrs	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4b8a      	ldr	r3, [pc, #552]	; (800509c <UART_SetConfig+0x254>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	6979      	ldr	r1, [r7, #20]
 8004e7c:	430b      	orrs	r3, r1
 8004e7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a78      	ldr	r2, [pc, #480]	; (80050a0 <UART_SetConfig+0x258>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d120      	bne.n	8004f06 <UART_SetConfig+0xbe>
 8004ec4:	4b77      	ldr	r3, [pc, #476]	; (80050a4 <UART_SetConfig+0x25c>)
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	2b03      	cmp	r3, #3
 8004ece:	d817      	bhi.n	8004f00 <UART_SetConfig+0xb8>
 8004ed0:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <UART_SetConfig+0x90>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004ee9 	.word	0x08004ee9
 8004edc:	08004ef5 	.word	0x08004ef5
 8004ee0:	08004efb 	.word	0x08004efb
 8004ee4:	08004eef 	.word	0x08004eef
 8004ee8:	2300      	movs	r3, #0
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e01d      	b.n	8004f2a <UART_SetConfig+0xe2>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e01a      	b.n	8004f2a <UART_SetConfig+0xe2>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e017      	b.n	8004f2a <UART_SetConfig+0xe2>
 8004efa:	2308      	movs	r3, #8
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e014      	b.n	8004f2a <UART_SetConfig+0xe2>
 8004f00:	2310      	movs	r3, #16
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e011      	b.n	8004f2a <UART_SetConfig+0xe2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a67      	ldr	r2, [pc, #412]	; (80050a8 <UART_SetConfig+0x260>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d102      	bne.n	8004f16 <UART_SetConfig+0xce>
 8004f10:	2300      	movs	r3, #0
 8004f12:	77fb      	strb	r3, [r7, #31]
 8004f14:	e009      	b.n	8004f2a <UART_SetConfig+0xe2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a64      	ldr	r2, [pc, #400]	; (80050ac <UART_SetConfig+0x264>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d102      	bne.n	8004f26 <UART_SetConfig+0xde>
 8004f20:	2300      	movs	r3, #0
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e001      	b.n	8004f2a <UART_SetConfig+0xe2>
 8004f26:	2310      	movs	r3, #16
 8004f28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f32:	d15b      	bne.n	8004fec <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004f34:	7ffb      	ldrb	r3, [r7, #31]
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d827      	bhi.n	8004f8a <UART_SetConfig+0x142>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0xf8>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f65 	.word	0x08004f65
 8004f44:	08004f6d 	.word	0x08004f6d
 8004f48:	08004f75 	.word	0x08004f75
 8004f4c:	08004f8b 	.word	0x08004f8b
 8004f50:	08004f7b 	.word	0x08004f7b
 8004f54:	08004f8b 	.word	0x08004f8b
 8004f58:	08004f8b 	.word	0x08004f8b
 8004f5c:	08004f8b 	.word	0x08004f8b
 8004f60:	08004f83 	.word	0x08004f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f64:	f7fe ff7e 	bl	8003e64 <HAL_RCC_GetPCLK1Freq>
 8004f68:	61b8      	str	r0, [r7, #24]
        break;
 8004f6a:	e013      	b.n	8004f94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f6c:	f7fe ff9c 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 8004f70:	61b8      	str	r0, [r7, #24]
        break;
 8004f72:	e00f      	b.n	8004f94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f74:	4b4e      	ldr	r3, [pc, #312]	; (80050b0 <UART_SetConfig+0x268>)
 8004f76:	61bb      	str	r3, [r7, #24]
        break;
 8004f78:	e00c      	b.n	8004f94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f7a:	f7fe fefd 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8004f7e:	61b8      	str	r0, [r7, #24]
        break;
 8004f80:	e008      	b.n	8004f94 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f86:	61bb      	str	r3, [r7, #24]
        break;
 8004f88:	e004      	b.n	8004f94 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	77bb      	strb	r3, [r7, #30]
        break;
 8004f92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d074      	beq.n	8005084 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	005a      	lsls	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	441a      	add	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	2b0f      	cmp	r3, #15
 8004fb6:	d916      	bls.n	8004fe6 <UART_SetConfig+0x19e>
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbe:	d212      	bcs.n	8004fe6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f023 030f 	bic.w	r3, r3, #15
 8004fc8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	085b      	lsrs	r3, r3, #1
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	89fb      	ldrh	r3, [r7, #14]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	89fa      	ldrh	r2, [r7, #14]
 8004fe2:	60da      	str	r2, [r3, #12]
 8004fe4:	e04e      	b.n	8005084 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	77bb      	strb	r3, [r7, #30]
 8004fea:	e04b      	b.n	8005084 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fec:	7ffb      	ldrb	r3, [r7, #31]
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d827      	bhi.n	8005042 <UART_SetConfig+0x1fa>
 8004ff2:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <UART_SetConfig+0x1b0>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	0800501d 	.word	0x0800501d
 8004ffc:	08005025 	.word	0x08005025
 8005000:	0800502d 	.word	0x0800502d
 8005004:	08005043 	.word	0x08005043
 8005008:	08005033 	.word	0x08005033
 800500c:	08005043 	.word	0x08005043
 8005010:	08005043 	.word	0x08005043
 8005014:	08005043 	.word	0x08005043
 8005018:	0800503b 	.word	0x0800503b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800501c:	f7fe ff22 	bl	8003e64 <HAL_RCC_GetPCLK1Freq>
 8005020:	61b8      	str	r0, [r7, #24]
        break;
 8005022:	e013      	b.n	800504c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005024:	f7fe ff40 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 8005028:	61b8      	str	r0, [r7, #24]
        break;
 800502a:	e00f      	b.n	800504c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800502c:	4b20      	ldr	r3, [pc, #128]	; (80050b0 <UART_SetConfig+0x268>)
 800502e:	61bb      	str	r3, [r7, #24]
        break;
 8005030:	e00c      	b.n	800504c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005032:	f7fe fea1 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8005036:	61b8      	str	r0, [r7, #24]
        break;
 8005038:	e008      	b.n	800504c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800503a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503e:	61bb      	str	r3, [r7, #24]
        break;
 8005040:	e004      	b.n	800504c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	77bb      	strb	r3, [r7, #30]
        break;
 800504a:	bf00      	nop
    }

    if (pclk != 0U)
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d018      	beq.n	8005084 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	085a      	lsrs	r2, r3, #1
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	441a      	add	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	fbb2 f3f3 	udiv	r3, r2, r3
 8005064:	b29b      	uxth	r3, r3
 8005066:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b0f      	cmp	r3, #15
 800506c:	d908      	bls.n	8005080 <UART_SetConfig+0x238>
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005074:	d204      	bcs.n	8005080 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	60da      	str	r2, [r3, #12]
 800507e:	e001      	b.n	8005084 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005090:	7fbb      	ldrb	r3, [r7, #30]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	efff69f3 	.word	0xefff69f3
 80050a0:	40013800 	.word	0x40013800
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40004400 	.word	0x40004400
 80050ac:	40004800 	.word	0x40004800
 80050b0:	007a1200 	.word	0x007a1200

080050b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01a      	beq.n	80051ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b2:	d10a      	bne.n	80051ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]
  }
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005208:	f7fb fcf4 	bl	8000bf4 <HAL_GetTick>
 800520c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b08      	cmp	r3, #8
 800521a:	d10e      	bne.n	800523a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800521c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f82d 	bl	800528a <UART_WaitOnFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d001      	beq.n	800523a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e023      	b.n	8005282 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b04      	cmp	r3, #4
 8005246:	d10e      	bne.n	8005266 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f817 	bl	800528a <UART_WaitOnFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e00d      	b.n	8005282 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b09c      	sub	sp, #112	; 0x70
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	603b      	str	r3, [r7, #0]
 8005296:	4613      	mov	r3, r2
 8005298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800529a:	e0a5      	b.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a2:	f000 80a1 	beq.w	80053e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a6:	f7fb fca5 	bl	8000bf4 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d302      	bcc.n	80052bc <UART_WaitOnFlagUntilTimeout+0x32>
 80052b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d13e      	bne.n	800533a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052d0:	667b      	str	r3, [r7, #100]	; 0x64
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e6      	bne.n	80052bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	3308      	adds	r3, #8
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	f023 0301 	bic.w	r3, r3, #1
 8005304:	663b      	str	r3, [r7, #96]	; 0x60
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3308      	adds	r3, #8
 800530c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800530e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005310:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800531c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1e5      	bne.n	80052ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2220      	movs	r2, #32
 8005326:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e067      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d04f      	beq.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005356:	d147      	bne.n	80053e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005360:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005376:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
 8005382:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e6      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3308      	adds	r3, #8
 800539a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	613b      	str	r3, [r7, #16]
   return(result);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f023 0301 	bic.w	r3, r3, #1
 80053aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3308      	adds	r3, #8
 80053b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053b4:	623a      	str	r2, [r7, #32]
 80053b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	69f9      	ldr	r1, [r7, #28]
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e5      	bne.n	8005394 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2220      	movs	r2, #32
 80053d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e010      	b.n	800540a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	4013      	ands	r3, r2
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	429a      	cmp	r2, r3
 8005404:	f43f af4a 	beq.w	800529c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3770      	adds	r7, #112	; 0x70
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005412:	b480      	push	{r7}
 8005414:	b095      	sub	sp, #84	; 0x54
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800542e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005438:	643b      	str	r3, [r7, #64]	; 0x40
 800543a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800543e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e6      	bne.n	800541a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	e853 3f00 	ldrex	r3, [r3]
 800545a:	61fb      	str	r3, [r7, #28]
   return(result);
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	64bb      	str	r3, [r7, #72]	; 0x48
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3308      	adds	r3, #8
 800546a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800546c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005474:	e841 2300 	strex	r3, r2, [r1]
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1e5      	bne.n	800544c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005484:	2b01      	cmp	r3, #1
 8005486:	d118      	bne.n	80054ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	60bb      	str	r3, [r7, #8]
   return(result);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f023 0310 	bic.w	r3, r3, #16
 800549c:	647b      	str	r3, [r7, #68]	; 0x44
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a6:	61bb      	str	r3, [r7, #24]
 80054a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	6979      	ldr	r1, [r7, #20]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	613b      	str	r3, [r7, #16]
   return(result);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e6      	bne.n	8005488 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	665a      	str	r2, [r3, #100]	; 0x64
}
 80054cc:	bf00      	nop
 80054ce:	3754      	adds	r7, #84	; 0x54
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f7ff fc90 	bl	8004e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054fc:	bf00      	nop
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	60bb      	str	r3, [r7, #8]
   return(result);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	61bb      	str	r3, [r7, #24]
 800552c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	6979      	ldr	r1, [r7, #20]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	e841 2300 	strex	r3, r2, [r1]
 8005536:	613b      	str	r3, [r7, #16]
   return(result);
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1e6      	bne.n	800550c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7ff fc5c 	bl	8004e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005550:	bf00      	nop
 8005552:	3720      	adds	r7, #32
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <__libc_init_array>:
 800556c:	b570      	push	{r4, r5, r6, lr}
 800556e:	4d0d      	ldr	r5, [pc, #52]	; (80055a4 <__libc_init_array+0x38>)
 8005570:	4c0d      	ldr	r4, [pc, #52]	; (80055a8 <__libc_init_array+0x3c>)
 8005572:	1b64      	subs	r4, r4, r5
 8005574:	10a4      	asrs	r4, r4, #2
 8005576:	2600      	movs	r6, #0
 8005578:	42a6      	cmp	r6, r4
 800557a:	d109      	bne.n	8005590 <__libc_init_array+0x24>
 800557c:	4d0b      	ldr	r5, [pc, #44]	; (80055ac <__libc_init_array+0x40>)
 800557e:	4c0c      	ldr	r4, [pc, #48]	; (80055b0 <__libc_init_array+0x44>)
 8005580:	f000 f820 	bl	80055c4 <_init>
 8005584:	1b64      	subs	r4, r4, r5
 8005586:	10a4      	asrs	r4, r4, #2
 8005588:	2600      	movs	r6, #0
 800558a:	42a6      	cmp	r6, r4
 800558c:	d105      	bne.n	800559a <__libc_init_array+0x2e>
 800558e:	bd70      	pop	{r4, r5, r6, pc}
 8005590:	f855 3b04 	ldr.w	r3, [r5], #4
 8005594:	4798      	blx	r3
 8005596:	3601      	adds	r6, #1
 8005598:	e7ee      	b.n	8005578 <__libc_init_array+0xc>
 800559a:	f855 3b04 	ldr.w	r3, [r5], #4
 800559e:	4798      	blx	r3
 80055a0:	3601      	adds	r6, #1
 80055a2:	e7f2      	b.n	800558a <__libc_init_array+0x1e>
 80055a4:	08005614 	.word	0x08005614
 80055a8:	08005614 	.word	0x08005614
 80055ac:	08005614 	.word	0x08005614
 80055b0:	08005618 	.word	0x08005618

080055b4 <memset>:
 80055b4:	4402      	add	r2, r0
 80055b6:	4603      	mov	r3, r0
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d100      	bne.n	80055be <memset+0xa>
 80055bc:	4770      	bx	lr
 80055be:	f803 1b01 	strb.w	r1, [r3], #1
 80055c2:	e7f9      	b.n	80055b8 <memset+0x4>

080055c4 <_init>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	bf00      	nop
 80055c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ca:	bc08      	pop	{r3}
 80055cc:	469e      	mov	lr, r3
 80055ce:	4770      	bx	lr

080055d0 <_fini>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	bf00      	nop
 80055d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d6:	bc08      	pop	{r3}
 80055d8:	469e      	mov	lr, r3
 80055da:	4770      	bx	lr
